[
{
	"uri": "/docsite/minnosuitedashboard/admin/",
	"title": "Getting started (admin account)",
	"tags": [],
	"description": "",
	"content": "As an admin, we recommend that you first make sure the Dashboard works over https (i.e., provides secure connection to all the users). Please refer to the relevant help page in this website to learn how to do that.\nNext, create user accounts for the researchers who will use the system. Even if you are the only user of your system, it is better if you separate between the admin account and the researcher account. To create a new user account, go to Admin-\u0026gt;User Management and Add a new user.\nIf you want the Dashboard to send emails to users (e.g., when creating new accounts, or when one user adds another user as a collaborator on a study), go to Admin-\u0026gt;Edit Configuration and Enable Gmail. Because the Dashboard needs the email password for sending emails, we recommend you create a new Gmail account for the Dashboard.\n"
},
{
	"uri": "/docsite/minnosuitedashboard/",
	"title": "Using the Dashboard",
	"tags": [],
	"description": "",
	"content": "MinnoSuite allows creating web studies, running them, and downloading their data. It includes three components. MinnoDashboard is a web application that operates researcher accounts. The researchers use their accounts to create studies, run them, and read their data. MinnoPlayer is a JavaScript-based languages that allows creating studies with questionnaires, reaction-time tasks, and simple message pages. MinnoServer collects the data and provides researchers access to the data.\nYou can install MinnoSuite on your own server, by following the installation guides on this website. If you want (paid) help installing MinnoSuite, creating studies, and analyzing their data, you can contact Project Implicit at services@projectimplicit.net.\nAfter installing MinnoSuite on your own server, the only account in the system is the admin account. The admin creates accounts for the researchers who use the website (e.g., the grad students in your lab). The researchers use those accounts to create studies, run them, and download their data. This website explains how to do that.\nWhat the MinnoSuite does not support?\n There is no graphical user interface for a point-and-clicking authoring of the studies. Researchers write code (in MinnoPlayer\u0026rsquo;s simple language). MinnoSuite does not include a participant-pool website. You get a link to each study and use that link in your own participant pool (including Sona System, MTurk, Prolific, etc.). MinnoPlayer does not support live interaction between different participants. You can add video and audio stimuli to MinnoPlayer studies, but that might require some advanced programming. MinnoPlayer does not require the participants to install anything. That means that its time precision is limited, in comparison to desktop programs. Currently, there is no millisecond-precision solutions in web studies that do not require the participants to install the program on their own computer.  "
},
{
	"uri": "/docsite/minnojsstudydevelopment/documentation/",
	"title": "Documentation",
	"tags": [],
	"description": "",
	"content": "under construction\n"
},
{
	"uri": "/docsite/installation/",
	"title": "Installation",
	"tags": [],
	"description": "",
	"content": "This guide covers the installation process for the Minnosuite Dashboard.\nThe requirements page covers the basic requiremnts your machine needs in order to install the application and allow participants access it from the web. You can show that page to your IT department to get your machine configured.\nOur Easy Installation With Docker page is a brief guide for installing the system that should work for Linux, Windows 10, and Mac.\n"
},
{
	"uri": "/docsite/installation/requirements/",
	"title": "Requirements",
	"tags": [],
	"description": "",
	"content": " This page will cover the minimum requirements to install the Minnosuite Dashboard.\nCommon Requirements Make sure to install the software on a computer that has at least 2 GB free disc space. We recommend more space (e.g., 10 Gb), to make sure you have enough for many participants and many studies.\nAlthough you can restrict the platform to local usage (i.e., participants will complete the experiments on the same computer that runs this software), the platform was developed to enable running studies over the Internet. For that, make sure you are able to listen to port 80 on the computer, which may require administrator access, and have port 80 open to the world and not blocked by your firewall. We strongly recommend opening port 443 as well (listen and allow access), to allow secure (SSL) connection over the Internet. Additionally, the machine should have a static IP address.\nYou will probably also want to have a domain for your server. We have a guide for setting up one with Freenom here. However, you do not need to do that if you already have a domain for your machine, or if your IT department can set up a domain for you.\n"
},
{
	"uri": "/docsite/minnojsstudydevelopment/dataanalysis/",
	"title": "Data Analysis",
	"tags": [],
	"description": "",
	"content": "under construction\n"
},
{
	"uri": "/docsite/minnosuitedashboard/researcher/",
	"title": "Getting started (researcher)",
	"tags": [],
	"description": "",
	"content": "To get to know the system, we recommend you first duplicate a study from the bank of studies. After you log-in, click Studies, click on the dropdown menu that shows \u0026ldquo;Show all my studies\u0026rdquo; and select \u0026ldquo;Show bank studies\u0026rdquo;. You will see all the example studies in the system, and an \u0026ldquo;Actions\u0026rdquo; button next to each of thse studies. Decide which of those studies you want to duplicate (e.g., race.demo), click Actions-\u0026gt;Duplicate study, set the name of the study (e.g., \u0026ldquo;example\u0026rdquo;), and click OK.\nNow you see a list of the study files on the left. You can click those files to see the code of each file. You can change the code, but don\u0026rsquo;t do that yet. Let\u0026rsquo;s first see you can run the study ok. For that, right click on the file \u0026lsquo;mgr.js\u0026rsquo; and select \u0026ldquo;Make Experiment\u0026rdquo;. Set the name of the experiment (e.g., \u0026ldquo;example\u0026rdquo;). Now you can run the study. Right click the \u0026ldquo;mgr.js\u0026rdquo; file, select Experiment options -\u0026gt; Play this task. We recommend you run the whole study to learn how the typical study looks in MinnoPlayer.\nNext, go to the files and try to change minor details, to see how they change the study. For instance, go to explicit.js, and change the text for some of the questions. After you change a file, sometimes you will not see the change in your study because the browser reads the study from the cache. You can clear the browser\u0026rsquo;s cache each time you run a study. Or, you can right click the \u0026ldquo;mgr.js\u0026rdquo; file, go to Experiment options -\u0026gt; Copy Launch URL. You can copy the link and paste it within an incognito Chrome browser window (use ctrl-shift-n to open an incognito window) or a private Firefox browser window (ctrl-shift-p). Or, you can right click on the HERE link and select \u0026ldquo;Open in incognito window\u0026rdquo; (Chrome) or \u0026ldquo;Open in Private window\u0026rdquo; (Firefox), to run the study directly in a browser window that does read files from the cache.\nIf you want to skip a task in the study, Esc+right arrow will skip to the next task. Within the IAT, Esc+Enter will skip a block.\nAfter you run the study a couple of times, it is time to look at the data. In the same page (the one that shows you the study files), click on the three rows icon at the top left, to open the Study menu, and select Data. Have a look at the window that opens to learn about your options when downloading data. Then, without changing anything, click the \u0026ldquo;Download\u0026rdquo; button. Soon the data file will appear and you would be able to click the Download icon (below Actions) to download the data file. It will be a zip folder. Extract the files and open them to learn how the data look.\n"
},
{
	"uri": "/docsite/installation/basicinstallation/",
	"title": "Easy Installation With Docker",
	"tags": [],
	"description": "",
	"content": "This page will cover the general way to get the MinnoSuite Dashboard installed using Docker, a tool designed to make it easier to create, deploy, and run applications.\n Check our requirements page and make sure that the machine that you want to use meets the requirements.\n Install Docker on your machine, using the Docker CE download link on the right of the page here for windows 8+, here for MacOs, or here for Ubuntu Linux,and following the instructions that they give you. Make sure to continue to the post installaion steps page and follow the instructions there too. For Centos 8 / RHEL 8 use this guide, and if it gives you conflict errors run sudo yum erase docker-engine-selinux and then retry the instructions.\n Install Docker-compose on your machine, using the guide here.\n create a new folder in your file system to hold your minnoSuite server, and download this docker-compose file into it.\n You can update the configuration for your server by editing the docker-compose file with a text editor. Read about the docker-compose file here.\n Open the command prompt (windows) or terminal (Linux/Mac) for your machine, and navigate to the folder that you downloaded the docker-compose file to, and type: docker-compose up -d\nTo stop the server you can type docker-compose down\nIf you are using a Mac or Linux machine and binding to port 80 or 443, you may get an error unless you start the server as an administrator by typing: sudo docker-compose up\n You should see a message about the server being up, and be given a port and URL to use. Enter that URL in your browser and you will be connected. The default user is username : admin and password: admin123\n To get HTTPS working, first follow the guide to setting up your domain. Then while logged to the open dashboard as an admin go to the admin-\u0026gt; edit configation page. Change the server type to \u0026ldquo;greenlock\u0026rdquo; and enter in your domain, without the http:// part. Press the update button and the server should switch to using https.\n  "
},
{
	"uri": "/docsite/minnojsstudydevelopment/examples/",
	"title": "Examples",
	"tags": [],
	"description": "",
	"content": "under construction\n"
},
{
	"uri": "/docsite/minnosuitedashboard/configfile/",
	"title": "The Docker Configuration File",
	"tags": [],
	"description": "",
	"content": " The Docker Configuration File This page will describe the parts of the docker-compose configuration file that you might want to edit.\nports: - \u0026quot;80:80\u0026quot; #specify ports forwarding - \u0026quot;443:443\u0026quot; #specify ports forwarding - \u0026quot;27018:27017\u0026quot; # specify ports forwarding  By default the server will run on port 80 for http requests and 443 for https requests and 27018 for DB requests. If you want to change it then you\u0026rsquo;d do something like \u0026ldquo;81:80\u0026rdquo; to make it run on port 81 for http requests.\n-SERVER_TYPE: \u0026quot;http\u0026quot; \u0026quot;http\u0026quot;, \u0026quot;https\u0026quot;, or \u0026quot;greenlock\u0026quot;  \u0026ldquo;http\u0026rdquo; will make it only run with a http service. \u0026ldquo;https\u0026rdquo; will make it run on https also using a certificate and key file that you provide. \u0026ldquo;greenlock\u0026rdquo; will make it automatically aquire certificates for you using Greenlock. When using https, update the part of the config file under \u0026ldquo;volumes\u0026rdquo; with \u0026ldquo;./localhost.crt\u0026rdquo; and \u0026ldquo;/localhost.key\u0026rdquo; to point to the file path of the crt and key files for your domain. It is up to you to aquire them. When using greenlock, update the OWNER_EMAIL and DOMAINS field with your email and domain, and also make sure that the DNS for your domain points to the machine you are running this on.\n volumes: - ./data/user:/usr/src/minnoserver/user - ./data/localhost.crt:/usr/src/minnoserver/localhost.crt - ./data/localhost.key:/usr/src/minnoserver/localhost.key  This sets the location on your local file system that will be used by the docker container to store dynamic content. So if you want the user files for their studies to be somewhere else, you would change the ./data/user part. The crt and key files are for SSL certificates. If you want to have your dashboard be running SSL from the start, you can supply the crt and key files and set the server type to https.\n"
},
{
	"uri": "/docsite/minnojsstudydevelopment/",
	"title": "minnoJs Study Development",
	"tags": [],
	"description": "",
	"content": "under construction\n"
},
{
	"uri": "/docsite/installation/awsinstallation/",
	"title": "AWS Cloud Installation",
	"tags": [],
	"description": "",
	"content": "This guide will cover getting a minnoServer instance running on AWS using docker.\n Sign up for AWS\n Login, and from the EC2 console left menu chose Images -\u0026gt; AMIs\n Change the filter to public images, and then search for AMI by id ami-085650a59b2570f08 .\n It should show up, with name minnoServer. Right click on it and select \u0026ldquo;launch\u0026rdquo;\n Choose whatever processor you want (the free tier one probably), then click \u0026ldquo;next: configure instance details\u0026rdquo;\n Keep clicking next until you get to the \u0026ldquo;configure security group\u0026rdquo; page.\n Click the \u0026ldquo;add rule\u0026rdquo; button twice, and set the 2 new rules to \u0026ldquo;HTTPS\u0026rdquo; and \u0026ldquo;HTTP\u0026rdquo;, so in total you will have those 2 and \u0026ldquo;SSH\u0026rdquo; rules. You don\u0026rsquo;t have to mess with any of the details of the rules.\n Then you can click \u0026ldquo;review and launch\u0026rdquo; and then \u0026ldquo;launch\u0026rdquo; from the next screen.\n On the next screen (a pop-up) you will have to create and download a key pair pem file. In the first drop-down list, select “Create a new key pair”. Give it whatever name you would like. This file is what you will use to log into the server. Don\u0026rsquo;t lose it- you will not be able to log in without it. Then, click “Launch instances”. You will see a page indicating that “Your instance are now launching”.\n On the bottom-right, click the button “View instances”. It will now appear in the \u0026ldquo;instances-\u0026gt;instances\u0026rdquo; tab in the console. Go there and click on it to get the details. You will need to use the IPv4 Public IP and Public DNS (IPv4) later. Write them down.\n Go to the url in your browsr: Public DNS (IPv4) + \u0026ldquo;/dashboard/\u0026rdquo;, such as ec2-18-218-121-155.us-east-2.compute.amazonaws.com/dashboard/ . This will be the dashboard. the default admin user is username:admin , pw: admin123\n To be able to connect using https and make your server much more secure, follow the guide here for details on connecting securely using a domain you already have, or using a free domain from Freenom. If you prefer to exclusively use Amazon (for setting up https and obtaining a domain), the process will be a bit more complicated and will not be free. For that, follow our guide here.\n  "
},
{
	"uri": "/docsite/minnosuitedashboard/dropbox/",
	"title": "Setting up Dropbox",
	"tags": [],
	"description": "",
	"content": " Setting up Dropbox This page describes how to connect your minnoDashboard to Dropbox. Synchronization with Dropbox allows users to backup their studies on their own dropbox account. After you enable this feature, each user can request to sync their own Dashboard account with their own Dropbox account.\nThe synchronization is on one direction only: any change in the Dashboard will be updated in the user’s Dropbox account. Changing those files outside of the Dashboard, however, will not influence the Dashboard. That is, modifying the files in the Dashboard can be done only through the Dashboard.\nNote: Because the files are synchronized by each user separately with their own Dropbox account, enabling this feature does not mean that admins will have access to those files.\nHow to enable this feature: To enable this feature on this Dashboard, you should create a dropbox application. To do so, you need a dropbox account. The basic free package includes 2GB (see more information about the basic package here.\nOnce the admin has a working Dropbox account the creation of the application should be done as follows:\n Login to Dropbox developers: https://www.dropbox.com/developers\n Click on Create apps.\n Choose an API: Dropbox API.\n Choose The type of access you need: App folder\n Choose any name you want to the application\n That’s it - click on Create app to create the application\n The application will appear under the App console. Click on the icon to get access to the application details.\n Two important parameters should be provided to the researcher dashboard. These two parameters are located in your Dropbox application page:\n App key (public key that is used for the users) App secret (public key that is used for the server to get access to the Dropbox - don’t share this key!!!).  To avoid security issues, Dropbox asks developers to provide list of URIs that will be used by the application. This list is located in your Dropbox application page. The URL will be with the format [http/https]://[domain]/dropbox/set. When [http/https] depends on the certification authority of the dashboard and [domain] is the full URI of the dashboard (e.g https://mydomain/dropbox/set). Please note: the extension of /dropbox/set is mandatory. So if you dashboard is hosted at mydomain.com using https, the url you\u0026rsquo;d enter would be https://mydomain.com/dropbox/set\n Log in to the dashboard with an admin account\n From the dropdown menu\u0026rsquo;s at the top of the screen, select Admin -\u0026gt; edit configuration\n In the dropbox section, click the \u0026ldquo;Enable Dropbox Syncronization\u0026rdquo; radio button and enter in the app key and app secret key in the text boxes, and then click \u0026ldquo;save changes\u0026rdquo;.\n You are now done. Users will be able to connect to dropbox now by going to their settings page by clicking on the gear icon to the right of the \u0026ldquo;Logout\u0026rdquo; button in the dashboard, and then clicking the \u0026ldquo;Syncronize with your Dropbox Account\u0026rdquo; button.\n  "
},
{
	"uri": "/docsite/installation/domain/",
	"title": "Setting up your domain",
	"tags": [],
	"description": "",
	"content": "This guide will cover how to enable SSL on your running dashboard server.\n Get a domain connected to the IP address of your server, such as using our guide to do so with Freenom Log in to the dashboard with an admin account From the dropdown menu\u0026rsquo;s at the top of the screen, select Admin -\u0026gt; edit configuration If you do not have a SSL certificate, use the dropdown to change the server type to \u0026lsquo;Greenlock\u0026rsquo;. Enter your email in the box provided, and the domain you registered in the next box, i.e. mydomain.com. This will automatically get the certificate for you using Greenlock. If you do have a certificate, use the dropdown to change the server type to \u0026lsquo;https\u0026rsquo;. Copy the content of your cert and key files into the text boxes provided. Click save, and now it should work. You\u0026rsquo;ll have to connect using https, such as https://mydomain.com/dashboard from here on out.  "
},
{
	"uri": "/docsite/installation/awsinstallation/awspayssl/",
	"title": "AWS Paid SSL",
	"tags": [],
	"description": "",
	"content": "This guide will cover how to enable SSL on your running AWS server through purchasing a domain and services from Amazon. Set up your dashboard server first from our guide here.\n Go to https://console.aws.amazon.com/route53/home Click the \u0026ldquo;Register Domain\u0026rdquo; button\n Type in the domain name you want and the suffix you want and click the \u0026ldquo;Check\u0026rdquo; button. Amazon you will then be able to click \u0026ldquo;add to cart\u0026rdquo; to purchase the domain if it is available, or will be given suggestions for alternatives that are open for purchase if not. Scroll to the bottom of the page and click the \u0026ldquo;continue\u0026rdquo; button once it is in your cart The next page will have a lot of personal info that you will have to fill out. This is to register you as owner of the domain, and make sure that changes to it have to go through you. Click the button to continue when you are done Click the checkbox to agree to their Registration Agreement, and then the \u0026ldquo;Complete Purchase\u0026rdquo; button.\n You will be emailed about the domain at the email you entered. If you don\u0026rsquo;t click the link in the email within 15 days to verify that you provided a valid email address, the registrar will suspend your domain. A suspended domain is not available on the Internet. After you click the link in the email, in a day or 2 you will get another email saying that your domain was successfully registered with Route 53 Go to the Amazon certificate manager at https://us-east-2.console.aws.amazon.com/acm and request a certificate. If this is your first time there then click provisioning a certificates -\u0026gt; get started. request a public certificate and click the request a certificate button type in your domain name in the text box, then click “add another domain to this certificate”, and then \u0026ldquo;www\u0026rdquo; + your domain name in the next box, and click next. So for example if your domain is test.com, the 2 boxes would have test.com and www.test.com Leave it as DNS validation and click Rreview. Then click “Cconfirm and request” on the next page Click the arrow by the domain to expand the view.\n Click the \u0026ldquo;create record in route 53\u0026rdquo; button, and then click the “Create” button in the window that pops up. Wait 30 minutes - 2 hours for the change to propagate The certificate manager will list the status as \u0026ldquo;issued\u0026rdquo; once it is ready for you to complete. If it fails after 24 hours you can try deleting it and resubmitting. Go back to the EC2 dashboard at https://us-east-2.console.aws.amazon.com/ec2 and then click on the \u0026ldquo;Load Balancers\u0026rdquo; link Click on the \u0026ldquo;Create Load Balancer\u0026rdquo; button Choose \u0026ldquo;Application Load Balancer\u0026rdquo; by clicking on the \u0026ldquo;Create\u0026rdquo; button for it Type in a name for it Click the \u0026ldquo;add listener\u0026rdquo; button and then select \u0026ldquo;HTTPS\u0026rdquo; from the \u0026ldquo;choose a protocol\u0026rdquo; dropdown Check the boxes for at least 2 subnets under the \u0026ldquo;availability zones\u0026rdquo; area Click the \u0026ldquo;Next: configure security settings\u0026rdquo; button at the bottom right The next page lets you set up a certificate. It should default to the one that you create and got issued earlier (the name will appear in the Certificate name, and the selected Certificate type would be “Choose a certificate from ACM”). If yes, you can, just click the “Next: Configure Security Group” button at the bottom right again. Otherwise choose \u0026ldquo;Choose a certificate from ACM\u0026rdquo; and then from the \u0026ldquo;certificate name\u0026rdquo; dropdown choose the one with your domain name. Choose the security group you made in part 7 of the initial guide (you can see the name of that security group if you go to EC2 Dashboard-\u0026gt;Running Instances, on the far right of the records you have for the relevant instance), and click “Next: Configure Routing”. Or if you don\u0026rsquo;t see that then choose to create a new security group, and then Click the \u0026ldquo;add rule\u0026rdquo; button twice, and set the 2 new rules to \u0026ldquo;HTTPS\u0026rdquo; and \u0026ldquo;HTTP\u0026rdquo;, so in total you will have those 2 and \u0026ldquo;SSH\u0026rdquo; rules. You don\u0026rsquo;t have to mess with any of the details of the rules.\n You should be on the \u0026ldquo;Configure routing\u0026rdquo; page now. From the \u0026ldquo;target group\u0026rdquo; dropdown, select \u0026ldquo;existing target group\u0026rdquo;, and then select the name from the dropdown that you previously entered. I chose “New target group” entered a name, selected the Instance tha matached the Instance ID on your EC2 page, clicked “Add to registered”, clicked Next:Review, clicked “Create”, Now you are done configuring it, so just keep clicking the next button, and then finally \u0026ldquo;create\u0026rdquo; one you get that button. You should get a message saying \u0026ldquo;Successfully created load balancer\u0026rdquo;.\n Close the dialogue and now you should see a page showing you your load balancers, with the one you just created appearing. Click on the row with your load balancer, and then from the details page write down the DNS name that it gives.\n Go back to the Route 53 dashboard at https://console.aws.amazon.com/route53/home , or from Services-\u0026gt;Route53and click on the \u0026ldquo;Hosted zones\u0026rdquo; link Click the radio button for your hosted zone and then click the \u0026ldquo;go to record sets\u0026rdquo; button. You should see 2 rows with type \u0026ldquo;A\u0026rdquo;. Click on each of them to highlight them, and then from the \u0026ldquo;edit record set\u0026rdquo; box that appears on the right, Click the Alias \u0026ldquo;Yes\u0026rdquo; radio button, then for the alias target type in the DNS name that you saved in step 37, and finally click the \u0026ldquo;save record set\u0026rdquo; button. Now after waiting for up to 5 minutes, you should be able to access the minnoSuite dashboard at your domain + \u0026ldquo;/static\u0026rdquo;, such as www.implicit.ga/static . Https will work also. This will be the dashboard. the default admin user is username:admin , pw: admin123  "
},
{
	"uri": "/docsite/installation/domain/freedomain/",
	"title": "Free domain with Freenom",
	"tags": [],
	"description": "",
	"content": "This guide will cover how to set up a free domain using Freenom. Afterwords you can continue setting up your domain.\n Go to http://www.freenom.com/ Go to Services -\u0026gt; Register a new domain. Pick the domain you want and register it (You will register to freenom in the process of obtaining the domain). Go to services-\u0026gt;my domains Click \u0026ldquo;manage domain\u0026rdquo; on the domain you registered Click \u0026ldquo;manage freenom DNS\u0026rdquo; Add a record with type \u0026ldquo;A\u0026rdquo; and IP Address that you copied down earlier for your server, and then click \u0026ldquo;save changes\u0026rdquo; Wait ~1 hour for the DNS changes to propogate You should now be able to go to the domain name you registered and be sent to your docker server, such as \u0026ldquo;http://mydomain.com/dashboard\u0026quot;  "
},
{
	"uri": "/docsite/installation/advanced/",
	"title": "Server Installation",
	"tags": [],
	"description": "",
	"content": "This page will cover manually installing the minnoSuite Dashboard onto a server.\nIn general you will need to download it from here, and install mongoDB and nodeJs onto your system. The installation.sh file provides some sample scripts for installing on a Linux system. The readme file tells you what to run from your install directory to get the minnoSuite Dashboard running after all dependencies have been installed.\n"
},
{
	"uri": "/docsite/installation/digitalocean/",
	"title": "DigitalOcean Install Guide",
	"tags": [],
	"description": "",
	"content": " Register / sign in to DigitalOcean here .\n Go here and click the \u0026ldquo;Create Docker Droplet\u0026rdquo; button.\n Pick which price tier to use, probably the cheapest one at $5/month. The defaults are probably fine for other options. Go through everything until your droplet is created.\n Connect to the droplet using SSH. You should have an email from DigitalOcean with the ip address, username, and password to use.\n From the command line, run: wget \u0026quot;https://minnojs.github.io/docsite/installation/basicinstallation/docker-compose.yml\u0026quot;\n Next run: docker-compose up -d\n You should now be able to enter the IP address of your droplet into your browser bar and connect to the dashboard.\n To set up your domain with it and enable SSL, follow our guide here.\n If you need to shutdown the docker server, from the command line run docker-compose down.\n  "
},
{
	"uri": "/docsite/extendingsite/",
	"title": "Extending This Doc Site",
	"tags": [],
	"description": "",
	"content": "This page will cover editing and extending this doc site.\n Install Hugo, folling the instructions here. Also install git if you need to.\n Get a copy of the docsite here. Download it using git, such as with git clone https://github.com/minnojs/docsite.git\n From the command line in the docsite folder, run git submodule update --init --recursive to download the Hugo theme used by the docsite.\n You can read a guide on using the Hugo learn theme that our doc site makes use of here. In general you will be editing files in the content subfolder. Each folder in that is one layer of the nested sidebar menu, with the _index.en.md file inside it for the html that appears when you click on that menu item. Those files will have a weight at the top that determines their order in the menu: the pages with the lowest weight appear first.\n To start the server, from the command line in the docsite folder, run hugo server -t learn --baseURL=localhost/docsite . Then you should be able to go to http://localhost:1313/docsite/ in your browser and view the site. It should auto update the pages when you edit them, although you may have to restart to see changes to the sidebar menu. press ctrl/command+c in the command line window when you are ready to shut it down.\n Run hugo in the command line in the docsite folder to compile it when you are finished. Then the generated site will appear in the docs folder in the docsite directory.\n  Using git:\n After you have installed git, run git checkout https://github.com/minnojs/docsite.git\n Make your edits and test them.\n In your docsite folder, run git pull to make sure that there are no other remote updates to the docsite, then run git add ., followed by git commit -m \u0026quot;comment describing your updates to the docsite\u0026quot; and finally git push origin master .\n  "
},
{
	"uri": "/docsite/projectimplicit/",
	"title": "About Project Implicit",
	"tags": [],
	"description": "",
	"content": "under construction\n"
},
{
	"uri": "/docsite/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/docsite/",
	"title": "Documentation for minnoSuite",
	"tags": [],
	"description": "",
	"content": " Documentation for minnoSuite "
},
{
	"uri": "/docsite/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]