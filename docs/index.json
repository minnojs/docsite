[
{
	"uri": "/docsite/minnosuitedashboard/admin/",
	"title": "Getting started (admin account)",
	"tags": [],
	"description": "",
	"content": "As an admin, we recommend that you first make sure the Dashboard works over https (i.e., provides secure connection to all the users). Please refer to the relevant help page in this website to learn how to do that.\nNext, create user accounts for the researchers who will use the system. Even if you are the only user of your system, it is better if you separate between the admin account and the researcher account. To create a new user account, go to Admin-\u0026gt;User Management and Add a new user.\nIf you want the Dashboard to send emails to users (e.g., when creating new accounts, or when one user adds another user as a collaborator on a study), go to Admin-\u0026gt;Edit Configuration and Enable Gmail. Because the Dashboard needs the email password for sending emails, we recommend you create a new Gmail account for the Dashboard.\n"
},
{
	"uri": "/docsite/minnosuitedashboard/",
	"title": "Using the Dashboard",
	"tags": [],
	"description": "",
	"content": "MinnoSuite allows creating web studies, running them, and downloading their data. It includes three components. MinnoDashboard is a web application that operates researcher accounts. The researchers use their accounts to create studies, run them, and read their data. MinnoPlayer is a JavaScript-based language that allows creating studies with questionnaires, reaction-time tasks, and simple message pages. MinnoServer collects the data and provides researchers access to the data. MinnoSuite comes with example studies, including several examples for IAT (Implicit Association Test) studies.\nYou can install MinnoSuite on your own server, by following the installation guides on this website. If you want (paid) help installing MinnoSuite, creating studies, and analyzing their data, you can contact Project Implicit at services@projectimplicit.net.\nAfter installing MinnoSuite on your own server, the only account in the system is the admin account. The admin creates accounts for the researchers who use the website (e.g., the grad students in your lab). The researchers use those accounts to create studies, run them, and download their data. This documentation website explains how to do that.\nWhat the MinnoSuite does not support?\n There is no graphical user interface for a point-and-click authoring of the studies. Researchers write code (in MinnoPlayer\u0026rsquo;s simple language). MinnoSuite does not include a participant-pool website. You get a link to each study and use that link in your own participant pool (including Sona System, MTurk, Prolific, etc.). MinnoPlayer does not support live interaction between different participants. You can add video and audio stimuli to MinnoPlayer studies, but that might require some advanced programming. MinnoPlayer does not require the participants to install anything. That means that its time precision is limited, in comparison to desktop programs. Currently, there is no millisecond-precision solutions in web studies that do not require the participants to install the program on their own computer.  "
},
{
	"uri": "/docsite/minno-manager/playground/",
	"title": "Playground",
	"tags": [],
	"description": "",
	"content": "Use this playground in order to try out simple manager scripts.\n"
},
{
	"uri": "/docsite/minno-manager/api/tasks/",
	"title": "Tasks",
	"tags": [],
	"description": "",
	"content": "The basic unit in miManager is the task. There are many types of tasks available, and you can also create custom tasks of your own. Tasks are defined within the sequence just like any other element, and you can use mixers, inheritance, and templates to control their flow.\nFor example, following is a manager sequence with two subsequent tasks - first a questionnaire, then a time-sensitive tasks.\nAPI.addSequence([ { type: \u0026#39;quest\u0026#39;, name: \u0026#39;race-questionnaire\u0026#39;, scriptUrl:\u0026#39;race.quest.js\u0026#39;}, { type: \u0026#39;time\u0026#39;, name: \u0026#39;race-iat\u0026#39;, scriptUrl:\u0026#39;iat.js\u0026#39;} ]); Task properties All tasks have some common properties that can be used to customize their behaviour. Following is a list of such properties and a description of their behaviour.\n   Property Description     name Task name.   type Type of task (quest,message etc.).   pre A function to invoke before the task (may return a promise).   load A function to invoke as soon as the task is loaded (may return a promise).   post A function to invoke after the task (may return a promise).   canvas A canvas object (as defined under settings) to invoke at the beginning of the task and remove   title A string to be used as the page title (the name displayed on the tag). It is reset at the end of the task.   preText A template to be expanded before the task   postText A template to be expanded after the task   current An object that will be merged into the task current object.    "
},
{
	"uri": "/docsite/minno-manager/api/",
	"title": "API",
	"tags": [],
	"description": "",
	"content": "minno-manager is responsible for managing several MinnoJS tasks sequentially.\n"
},
{
	"uri": "/docsite/minno-manager/api/custom-tasks/",
	"title": "Custom tasks",
	"tags": [],
	"description": "",
	"content": "The miManager allows the creation of custom tasks. The format is fairly simple though you probably need at least some experience with programing for it.\nPlugging in miManager manages the task sequence for you as well as loading the task script (if needed). There are several ways to plug a new task into miManager, the all involve passing the activator function to the manager in various ways.\n You can pass the activator function as a script. You can pass it as the play property of the script object (). You can set it into the taskActivateProvider using taskActivateProvider.set(taskName, activatorFunction) during the configuration stage of the angular flow (This is worth the trouble mainly if you intend to use this task many times).  Activator function The activator function is the function that is responsible for the activation of your task as well as for the communication with miManager.\nIt should:\n Run your task (just do whatever you like). Return a function that may be used to force the end of the task. Call the done function whenever it is done.  The activator function is invoked using angular dependency injection, so you can use any of the angular annotation methods to get dependencies.\nThe following dependencies are supported (as well as all standard angular services):\n   Service Description     done A function that lets the manager know that the task has finished.   props An object with all sorts of useful tools.   $scope The task scope.   task The miManager element that defined this task.   script The task script (as defined in task.script or loaded from task.scriptUrl).   $element The tasks DOM Node wrapped in jqLite or jQuery.   global The global object   $injector an angularjs injector (it can allow you to $compile or accesses $rootScope)    Custom Task Example The following displays a messages to the user and proceeds to the next task after 5 seconds:\n// the define wrapper define(function(){ // the script object being returned  return { // custom script content  content: \u0026#39;Hi there, I\\\u0026#39;m your custom message\u0026#39;, // the activator function uses three dependencie  play: function activator(done, script, $element){ var timeoutId = setTimeout(done, 5000); $element.html(script.content); // will be called at the end of the task to clean things up  // (whether the end is forced or triggered by \u0026#39;done\u0026#39;)  return function clear(){ clearTimeout(timeoutId); $element.empty(); }; } }; }); In order to use it all you have to do is point the task to the correct url:\nvar taskElement = {scriptUrl:\u0026#39;path/to/script\u0026#39;}; "
},
{
	"uri": "/docsite/installation/",
	"title": "Installation",
	"tags": [],
	"description": "",
	"content": "We have a few guides for several different methods to install the MinnoSuite on your server.\nThe requirements page covers the basic requirements your machine needs in order to install the application and allow participants access it from the web. If you have help from an IT expert or an IT department, they could help configure your machine accordingly.\nOur Docker Installation page is a brief guide for installing the MinnoSuite that should work for Linux, Windows 10, and Mac. That is the recommended installation method if you have access to a machine that meets the requirements.\nOur AWS Cloud Installation page explains how to install the MinnoSuite using Amazon’s hosting service. It is a good option if you do not have access to a server machine that meets the requirements (e.g., at your university). Most people can do this on their own, without help from an IT expert. This option is free for a year (when AWS starts charging).\nThe DigitalOcean Installation page explains how to install the MinnoSuite on DigitalOcean’s service. It is a good option if you do not have access to a server machine that meets the requirements (e.g., at your university). Most people can do this on their own, without help from an IT expert. This option is not free but would work on the cheapest tier.\nThe Manual Installation page explains how to install the MinnoSuite directly on a machine that meets the requirements if you don’t want to use the docker installation.\n"
},
{
	"uri": "/docsite/installation/requirements/",
	"title": "Requirements",
	"tags": [],
	"description": "",
	"content": "This page contains the minimum requirements to install the Minnosuite Dashboard.\nCommon Requirements Make sure to install the software on a computer that has at least 2 GB free disc space. We recommend more space (e.g., 10 Gb), to make sure you have enough for many participants and many studies.\nAlthough you can restrict the platform to local usage (i.e., participants will complete the experiments on the same computer that runs this software), the platform was developed to enable running studies over the Internet. For that, make sure you are able to listen to port 80 on the computer, which may require administrator access, and have port 80 open to the world and not blocked by your firewall. We strongly recommend opening port 443 as well (listen and allow access), to allow secure (SSL) connection over the Internet. Additionally, the machine should have a static IP address.\nYou will probably also want to have a domain for your server. We have a guide for setting up a domain for free with Freenom here. However, you do not need to do that if you already have a domain for your machine, or if your IT department can set up a domain for you.\n"
},
{
	"uri": "/docsite/minno-manager/api/settings/",
	"title": "Settings",
	"tags": [],
	"description": "",
	"content": "Settings allow you to control the generic way that the player works. Change the settings using the addSettings function. The first argument to the function is always the name of the setting, the second argument is the setting values. In case the setting is an object, subsequent objects will extend each other so that settings may be progressively added.\nAll the functions within settings are invoked using angular. This means that you have access to any service you like, as well as some specific assets. In order to access the services simply use arguments with the appropriate name. For instance, this is how you would access $rootScope:\nfunction onEnd($rootScope){ $rootScope.$emit(\u0026#39;end!!\u0026#39;); } canvas canvas takes an object that describes the style of the task environment. Each property of the object changes a different style element.\n   Property Changes     background The overall background color.   canvasBackground Default canvas background color.   fontColor Default font color.   fontSize Default font size.    API.addSettings(\u0026#39;canvas\u0026#39;, { fontSize: \u0026#39;2em\u0026#39; }); In case you need to fine tune the styles even further you can add css rules into the raw HTML. Support for dynamically adding CSS is planned but not yet supported.\ninjectStyle Injects a string of css into the page.\nAPI.addSettings(\u0026#39;injectStyle\u0026#39;, \u0026#39;[pi-quest] label {font-size:1.2em; font-weight:normal;}\u0026#39;); onPreTask onPreTask is a function to be called before each task is called.\nAPI.addSettings(\u0026#39;onPreTask\u0026#39;, function(currentTask){ doSomethingWith(currentTask); });    Asset Description     currentTask The current task object   prevTask The previous task object (this may be used as a post task action as well\u0026hellip;)    onEnd onEnd is a function to be called as soon as the task sequence ends.\nAPI.addSettings(\u0026#39;onEnd\u0026#39;, function(){ // Do something: for instance, redirect to \u0026#39;my/url.js\u0026#39;  location.href = \u0026#39;my/url.js\u0026#39;; });    Asset Description     currentTask The current (last) task object    title title is a string to be used as the page title (the name displayed on the tag).\nAPI.addSettings(\u0026#39;title\u0026#39;, \u0026#39;My Manager Title\u0026#39;); preloadImages Accepts an array of image urls to preload. The manager will not wait until all images are loaded, but it will make images displayed later in the manager sequence be displayed significantly faster.\nAPI.addSettings(\u0026#39;preloadImages\u0026#39;, [\u0026#39;my/image/url/imageName.png\u0026#39;, \u0026#39;my/other/url/otherImage.jpg\u0026#39;]); skip Whether to activate the skip and refresh option. If activated, clicking ctrl r reloads the current task (this feature may not be supported on older browsers), clicking escape and then the right or left arrows skips to the next or previous tasks.\nAPI.addSettings(\u0026#39;skip\u0026#39;, true); skin Add a skin to your project. Skins change the way that your tasks look. Currently the only skins that we support are simple and demo.\nAPI.addSettings(\u0026#39;skin\u0026#39;, \u0026#39;demo\u0026#39;); rtl Setting rtl to true will change the layout of the player to right to left in order to ocomodate right to left languages such as arabic and hebrew.\nAPI.addSettings(\u0026#39;rtl\u0026#39;, true); logger The logger allows control of logging activities.\nFolowing are the properties available for the logger:\n   property description     url The url to send to. If it is not set, data will not be sent.   type The strategy to use for sending logs to the server. See options below.   pulse Allows you to post your data in pulses of \u0026ldquo;pulse\u0026rdquo; logs instead of all at the end of the task (Does not work for csv logger).    API.addSettings(\u0026#39;logger\u0026#39;, { url: \u0026#39;/manager/data\u0026#39;, type:\u0026#39;new\u0026#39;, pulse: 20 }); By deafault the logger posts according to the Project Implicit server rules (old). You can change the logging style by setting the logger type as follows:\n   type description     old Uses the post strategy implemented by the old PI server   new Uses the post strategy implemented by the new server   csv Posts all data as CSV at the end of the manager. If you are creating a manager that does not fully complete (for instance, when you have a message as your last page), use the postCSV task in addition to settings the log type to csv.   debug Logs all posts to the console. Do not do this in production! These logs aren\u0026rsquo;t posted to the server at all!    You can change the logging strategy or even create new strategies. Doing this is rather advanced and is documented here.\nDEBUG The DEBUG settings allows you to control the debug messages produced by the player. In the development environment (when window.DEBUG is set to true) you have access to a development console. The console will hold messages describing the process of your studies.\nAt the top of the console window you will see a dropdown that allows you to select the level of logging you would like to see. For example, you may want to be alerted only of errors, or of every possible activity of the player. In addition you have a button that allows you to close and open the console.\n   Property Description     hideConsole (true or false) hide console activity    API.addSettings(\u0026#39;DEBUG\u0026#39;, { hideConsole: true}); "
},
{
	"uri": "/docsite/minno-manager/tasks/",
	"title": "Task types",
	"tags": [],
	"description": "",
	"content": "Minno time supports many types of tasks (though by far the most extensive are quest and time). Following is a list of tasks types, follow the link to learn how to use them.\n   Task Description     Time Almost any time-sensitive task you can imagine   Questionnaire A full fledged questionnaire   Allow Leaving Control the mechanism preventing users from leaving the task by mistake   Inject Style Add css styles on the fly   Is Touch Ask if the user wants to use the touch interface   Messages Display messages and plain HTML to the user   Post Post task data to the server   Post CSV When using the CSV logger, post data to the server   Redirect Redirect user to an external URL   Set Value Manipulate environmental variables   Yes/No Ask a single Yes/No question    "
},
{
	"uri": "/docsite/minno-manager/examples/",
	"title": "Examples",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/docsite/minnosuitedashboard/researcher/",
	"title": "Getting started (researcher)",
	"tags": [],
	"description": "",
	"content": "To get to know the system, we recommend you first duplicate a study from the bank of studies. After you log-in, click Studies, click on the dropdown menu that shows \u0026ldquo;Show all my studies\u0026rdquo; and select \u0026ldquo;Show bank studies\u0026rdquo;. You will see all the example studies in the system, and an \u0026ldquo;Actions\u0026rdquo; button next to each of thse studies. Decide which of those studies you want to duplicate (e.g., race.demo), click Actions-\u0026gt;Duplicate study, set the name of the study (e.g., \u0026ldquo;example\u0026rdquo;), and click OK.\nNow you see a list of the study files on the left. You can click those files to see the code of each file. You can modify the code, but don\u0026rsquo;t do that yet. Let\u0026rsquo;s first see you can run the study. For that, right click on the file \u0026lsquo;mgr.js\u0026rsquo; and select \u0026ldquo;Make Experiment\u0026rdquo;. Set the name of the experiment (e.g., \u0026ldquo;example\u0026rdquo;). Now you can run the study. Right click the \u0026ldquo;mgr.js\u0026rdquo; file, select Experiment options -\u0026gt; Play this task. Run the whole study to learn how the typical study looks in MinnoPlayer.\nNext, go to the files and try to change minor details, to see how they change the study. For instance, go to explicit.js, and change the text for some of the questions. Details on how our studies work can be found here.\nAfter you update a file, sometimes you will not see the change in your study because the browser reads the study from the cache. You can clear the browser\u0026rsquo;s cache each time you run a study. Or, you can right click the \u0026ldquo;mgr.js\u0026rdquo; file, go to Experiment options -\u0026gt; Copy Launch URL. You can copy the link and paste it within an incognito Chrome browser window (use ctrl-shift-n to open an incognito window) or a private Firefox browser window (ctrl-shift-p). Or, you can right click on the HERE link and select \u0026ldquo;Open in incognito window\u0026rdquo; (Chrome) or \u0026ldquo;Open in Private window\u0026rdquo; (Firefox), to run the study directly in a browser window that does read files from the cache.\nIf you want to skip a task in the study, Esc+right arrow will skip to the next task. Within the IAT, Esc+Enter will skip a block.\nAfter you run the study a couple of times, it is time to look at the data. In the same page (the one that shows you the study files), click on the three rows icon at the top left, to open the Study menu, and select Data. Have a look at the window that opens to learn about your options when downloading data. Then, without changing anything, click the \u0026ldquo;Download\u0026rdquo; button. Soon the data file will appear and you will be able to click the Download icon (below Actions) to download the data file. It will be a zip folder. Extract the files and open them to learn how the data look.\n"
},
{
	"uri": "/docsite/installation/awsinstallation/awsupdate/",
	"title": "AWS Update",
	"tags": [],
	"description": "",
	"content": "This guide will cover how to update your dashboard version installed on AWS. Set up your dashboard server first from our guide here.\n  Connect to your EC2 instance using SSH.\n  From the terminal: run the following commands:\n docker-compose pull docker-compose up --force-recreate --build -d docker image prune -f    "
},
{
	"uri": "/docsite/installation/basicinstallation/",
	"title": "Docker Installation",
	"tags": [],
	"description": "",
	"content": "This page covers the general way to get the MinnoSuite Dashboard installed using Docker, a tool designed to make it easier to create, deploy, and run applications.\n  Check our requirements page and make sure that the machine that you want to use meets the requirements.\n  Install Docker on your machine, using the Docker CE download link on the right of the page here for windows 8+, here for MacOs, or here for Ubuntu, CentOS 7 , Debian , or Fedora Linux ,and following the instructions that they give you. On Linux machines sure to continue to the Linux post installaion steps page and follow the instructions there for the \u0026ldquo;Manage Docker as a non-root user\u0026rdquo; and \u0026ldquo;Configure Docker to start on boot\u0026rdquo; parts. For Centos 8 / RHEL 8 use this guide, and if it gives you conflict errors run sudo yum erase docker-engine-selinux and then retry the instructions.\n  Install Docker-compose on your machine, using the guide here.\n  Create a new folder in your file system to hold your minnoSuite server, and download this docker-compose file into it.\n  You can update the configuration for your server by editing the docker-compose file with a text editor. Read about the docker-compose file here.\n  Open the command prompt (windows) or terminal (Linux/Mac) for your machine, and navigate to the folder that you downloaded the docker-compose file to, and type: docker-compose up -d\nTo stop the server you can type docker-compose down\nIf you are using a Mac or Linux machine and binding to port 80 or 443, you may get an error unless you start the server as an administrator by typing: sudo docker-compose up\n  You should see a message about the server being up, and be given a port and URL to use. Enter that URL in your browser and you will be connected. The default user is username : admin and password: admin123\n  To get HTTPS working, first follow the guide to setting up your domain. Then while logged to the open dashboard as an admin go to the admin-\u0026gt; edit configation page. Change the server type to \u0026ldquo;greenlock\u0026rdquo; and enter in your domain, without the http:// part. Press the update button and the server should switch to using https.\n  "
},
{
	"uri": "/docsite/installation/basicinstallation/configfile/",
	"title": "The Docker Configuration File",
	"tags": [],
	"description": "",
	"content": "The Docker Configuration File This page will describe the parts of the docker-compose configuration file that you might want to edit.\n ports: - \u0026quot;80:80\u0026quot; #specify ports forwarding - \u0026quot;443:443\u0026quot; #specify ports forwarding - \u0026quot;27018:27017\u0026quot; # specify ports forwarding  By default the server will run on port 80 for http requests and 443 for https requests and 27018 for DB requests. If you want to change it then you\u0026rsquo;d do something like \u0026ldquo;81:80\u0026rdquo; to make it run on port 81 for http requests.\n -SERVER_TYPE: \u0026quot;http\u0026quot; \u0026quot;http\u0026quot;, \u0026quot;https\u0026quot;, or \u0026quot;greenlock\u0026quot;  \u0026ldquo;http\u0026rdquo; will make it only run with a http service. \u0026ldquo;https\u0026rdquo; will make it run on https also using a certificate and key file that you provide. \u0026ldquo;greenlock\u0026rdquo; will make it automatically aquire certificates for you using Greenlock. When using https, update the part of the config file under \u0026ldquo;volumes\u0026rdquo; with \u0026ldquo;./localhost.crt\u0026rdquo; and \u0026ldquo;/localhost.key\u0026rdquo; to point to the file path of the crt and key files for your domain. It is up to you to aquire them. When using greenlock, update the OWNER_EMAIL and DOMAINS field with your email and domain, and also make sure that the DNS for your domain points to the machine you are running this on.\n  volumes: - ./data/user:/usr/src/minnoserver/user - ./data/localhost.crt:/usr/src/minnoserver/localhost.crt - ./data/localhost.key:/usr/src/minnoserver/localhost.key  This sets the location on your local file system that will be used by the docker container to store dynamic content. So if you want the user files for their studies to be somewhere else, you would change the ./data/user part. The crt and key files are for SSL certificates. If you want to have your dashboard be running SSL from the start, you can supply the crt and key files and set the server type to https.\n"
},
{
	"uri": "/docsite/installation/awsinstallation/",
	"title": "AWS Cloud Installation",
	"tags": [],
	"description": "",
	"content": "This page covers getting a minnoServer instance running on AWS using docker. In short, all that it requires is duplicating an image of the server we already created on AWS, and configuring it and launching it.\n  Sign up for AWS\n  Login, and from the EC2 console left menu chose Images -\u0026gt; AMIs\n  Change the filter to public images, and then search for AMI by id ami-0ac765f8ae09dc5a3 .\n  It should show up, with name minnoServer. Right click on it and select \u0026ldquo;launch\u0026rdquo;\n  Choose whatever processor you want (the free tier one probably), then click \u0026ldquo;next: configure instance details\u0026rdquo;\n  Keep clicking next until you get to the \u0026ldquo;configure security group\u0026rdquo; page.\n  Click the \u0026ldquo;add rule\u0026rdquo; button twice, and set the 2 new rules to \u0026ldquo;HTTPS\u0026rdquo; and \u0026ldquo;HTTP\u0026rdquo;, so in total you will have those 2 and \u0026ldquo;SSH\u0026rdquo; rules. You don\u0026rsquo;t have to mess with any of the details of the rules.\n  Then you can click \u0026ldquo;review and launch\u0026rdquo; and then \u0026ldquo;launch\u0026rdquo; from the next screen.\n  On the next screen (a pop-up) you will have to create and download a key pair pem file. In the first drop-down list, select “Create a new key pair”. Give it whatever name you would like. This file is what you will use to log into the server. Don\u0026rsquo;t lose it- you will not be able to log in without it. Then, click “Launch instances”. You will see a page indicating that “Your instance are now launching”.\n  On the bottom-right, click the button “View instances”. It will now appear in the \u0026ldquo;instances-\u0026gt;instances\u0026rdquo; tab in the console. Go there and click on it to get the details. You will need to use the IPv4 Public IP and Public DNS (IPv4) later. Write them down.\n  Go to the url in your browsr: Public DNS (IPv4) + \u0026ldquo;/dashboard/\u0026rdquo;, such as ec2-18-218-121-155.us-east-2.compute.amazonaws.com/dashboard/ . This will be the dashboard. the default admin user is username:admin , pw: admin123\n  To be able to connect using https and make your server much more secure, follow the guide here for details on connecting securely using a domain you already have, or using a free domain from Freenom. If you prefer to exclusively use Amazon (for setting up https and obtaining a domain), the process will be a bit more complicated and will not be free. For that, follow our guide here.\n  "
},
{
	"uri": "/docsite/minnosuitedashboard/dropbox/",
	"title": "Setting up Dropbox",
	"tags": [],
	"description": "",
	"content": "Setting up Dropbox This page describes how to connect your minnoDashboard to Dropbox. Synchronization with Dropbox allows users to backup their studies on their own dropbox account. After you enable this feature, each user can request to sync their own Dashboard account with their own Dropbox account.\nThe synchronization is on one direction only: any change in the Dashboard will be updated in the user’s Dropbox account. Changing those files outside of the Dashboard, however, will not influence the Dashboard. That is, modifying the files in the Dashboard can be done only through the Dashboard.\nNote: Because the files are synchronized by each user separately with their own Dropbox account, enabling this feature does not mean that admins will have access to those files.\nHow to enable this feature:To enable this feature on this Dashboard, you should create a dropbox application. To do so, you need a dropbox account. The basic free package includes 2GB (see more information about the basic package here.\nOnce the admin has a working Dropbox account the creation of the application should be done as follows:\n  Login to Dropbox developers: https://www.dropbox.com/developers\n  Click on Create apps.\n  Choose an API: Dropbox API.\n  Choose The type of access you need: App folder\n  Choose any name you want to the application\n  That’s it - click on Create app to create the application\n  The application will appear under the App console. Click on the icon to get access to the application details.\n  Two important parameters should be provided to the researcher dashboard. These two parameters are located in your Dropbox application page:\n App key (public key that is used for the users) App secret (public key that is used for the server to get access to the Dropbox - don’t share this key!!!).    To avoid security issues, Dropbox asks developers to provide list of URIs that will be used by the application. This list is located in your Dropbox application page. The URL will be with the format [http/https]://[domain]/dropbox/set. When [http/https] depends on the certification authority of the dashboard and [domain] is the full URI of the dashboard (e.g https://mydomain/dropbox/set). Please note: the extension of /dropbox/set is mandatory. So if you dashboard is hosted at mydomain.com using https, the url you\u0026rsquo;d enter would be https://mydomain.com/dropbox/set\n  Log in to the dashboard with an admin account\n  From the dropdown menu\u0026rsquo;s at the top of the screen, select Admin -\u0026gt; edit configuration\n  In the dropbox section, click the \u0026ldquo;Enable Dropbox Syncronization\u0026rdquo; radio button and enter in the app key and app secret key in the text boxes, and then click \u0026ldquo;save changes\u0026rdquo;.\n  You are now done. Users will be able to connect to dropbox now by going to their settings page by clicking on the gear icon to the right of the \u0026ldquo;Logout\u0026rdquo; button in the dashboard, and then clicking the \u0026ldquo;Syncronize with your Dropbox Account\u0026rdquo; button.\n  "
},
{
	"uri": "/docsite/installation/digitalocean/",
	"title": "DigitalOcean Installation",
	"tags": [],
	"description": "",
	"content": "Installing MinnoSuite on DigitalOcean is extremely easy. Using DigitalOcean is not free, but probably the cheapest option would be enough for most labs.\n  Register / sign in to DigitalOcean here .\n  Go here and click the \u0026ldquo;Create Docker Droplet\u0026rdquo; button.\n  Pick which price tier to use, probably the cheapest one at $5/month. The defaults are probably fine for other options. Go through everything until your droplet is created.\n  Connect to the droplet using SSH. You should have an email from DigitalOcean with the ip address, username, and password to use.\n  From the command line, run: wget \u0026quot;https://minnojs.github.io/docsite/installation/basicinstallation/docker-compose.yml\u0026quot;\n  Next run: docker-compose up -d\n  You should now be able to enter the IP address of your droplet into your browser bar and connect to the dashboard.\n  To set up your domain with it and enable SSL, follow our guide here.\n  If you need to shutdown the docker server, from the command line run docker-compose down.\n  "
},
{
	"uri": "/docsite/installation/awsinstallation/awspayssl/",
	"title": "AWS Paid SSL",
	"tags": [],
	"description": "",
	"content": "This guide will cover how to enable SSL on your running AWS server through purchasing a domain and services from Amazon. Set up your dashboard server first from our guide here.\n Go to https://console.aws.amazon.com/route53/home Click the \u0026ldquo;Register Domain\u0026rdquo; button Type in the domain name you want and the suffix you want and click the \u0026ldquo;Check\u0026rdquo; button. Amazon you will then be able to click \u0026ldquo;add to cart\u0026rdquo; to purchase the domain if it is available, or will be given suggestions for alternatives that are open for purchase if not. Scroll to the bottom of the page and click the \u0026ldquo;continue\u0026rdquo; button once it is in your cart The next page will have a lot of personal info that you will have to fill out. This is to register you as owner of the domain, and make sure that changes to it have to go through you. Click the button to continue when you are done Click the checkbox to agree to their Registration Agreement, and then the \u0026ldquo;Complete Purchase\u0026rdquo; button. You will be emailed about the domain at the email you entered. If you don\u0026rsquo;t click the link in the email within 15 days to verify that you provided a valid email address, the registrar will suspend your domain. A suspended domain is not available on the Internet. After you click the link in the email, in a day or 2 you will get another email saying that your domain was successfully registered with Route 53 Go to the Amazon certificate manager at https://us-east-2.console.aws.amazon.com/acm and request a certificate. If this is your first time there then click provisioning a certificates -\u0026gt; get started. request a public certificate and click the request a certificate button type in your domain name in the text box, then click “add another domain to this certificate”, and then \u0026ldquo;www\u0026rdquo; + your domain name in the next box, and click next. So for example if your domain is test.com, the 2 boxes would have test.com and www.test.com Leave it as DNS validation and click Rreview. Then click “Cconfirm and request” on the next page Click the arrow by the domain to expand the view. Click the \u0026ldquo;create record in route 53\u0026rdquo; button, and then click the “Create” button in the window that pops up. Wait 30 minutes - 2 hours for the change to propagate The certificate manager will list the status as \u0026ldquo;issued\u0026rdquo; once it is ready for you to complete. If it fails after 24 hours you can try deleting it and resubmitting. Go back to the EC2 dashboard at https://us-east-2.console.aws.amazon.com/ec2 and then click on the \u0026ldquo;Load Balancers\u0026rdquo; link Click on the \u0026ldquo;Create Load Balancer\u0026rdquo; button Choose \u0026ldquo;Application Load Balancer\u0026rdquo; by clicking on the \u0026ldquo;Create\u0026rdquo; button for it Type in a name for it Click the \u0026ldquo;add listener\u0026rdquo; button and then select \u0026ldquo;HTTPS\u0026rdquo; from the \u0026ldquo;choose a protocol\u0026rdquo; dropdown Check the boxes for at least 2 subnets under the \u0026ldquo;availability zones\u0026rdquo; area Click the \u0026ldquo;Next: configure security settings\u0026rdquo; button at the bottom right The next page lets you set up a certificate. It should default to the one that you create and got issued earlier (the name will appear in the Certificate name, and the selected Certificate type would be “Choose a certificate from ACM”). If yes, you can, just click the “Next: Configure Security Group” button at the bottom right again. Otherwise choose \u0026ldquo;Choose a certificate from ACM\u0026rdquo; and then from the \u0026ldquo;certificate name\u0026rdquo; dropdown choose the one with your domain name. Choose the security group you made in part 7 of the initial guide (you can see the name of that security group if you go to EC2 Dashboard-\u0026gt;Running Instances, on the far right of the records you have for the relevant instance), and click “Next: Configure Routing”. Or if you don\u0026rsquo;t see that then choose to create a new security group, and then Click the \u0026ldquo;add rule\u0026rdquo; button twice, and set the 2 new rules to \u0026ldquo;HTTPS\u0026rdquo; and \u0026ldquo;HTTP\u0026rdquo;, so in total you will have those 2 and \u0026ldquo;SSH\u0026rdquo; rules. You don\u0026rsquo;t have to mess with any of the details of the rules. You should be on the \u0026ldquo;Configure routing\u0026rdquo; page now. From the \u0026ldquo;target group\u0026rdquo; dropdown, select \u0026ldquo;existing target group\u0026rdquo;, and then select the name from the dropdown that you previously entered. I chose “New target group” entered a name, selected the Instance tha matached the Instance ID on your EC2 page, clicked “Add to registered”, clicked Next:Review, clicked “Create”, Now you are done configuring it, so just keep clicking the next button, and then finally \u0026ldquo;create\u0026rdquo; one you get that button. You should get a message saying \u0026ldquo;Successfully created load balancer\u0026rdquo;. Close the dialogue and now you should see a page showing you your load balancers, with the one you just created appearing. Click on the row with your load balancer, and then from the details page write down the DNS name that it gives. Go back to the Route 53 dashboard at https://console.aws.amazon.com/route53/home , or from Services-\u0026gt;Route53and click on the \u0026ldquo;Hosted zones\u0026rdquo; link Click the radio button for your hosted zone and then click the \u0026ldquo;go to record sets\u0026rdquo; button. You should see 2 rows with type \u0026ldquo;A\u0026rdquo;. Click on each of them to highlight them, and then from the \u0026ldquo;edit record set\u0026rdquo; box that appears on the right, Click the Alias \u0026ldquo;Yes\u0026rdquo; radio button, then for the alias target type in the DNS name that you saved in step 37, and finally click the \u0026ldquo;save record set\u0026rdquo; button. Now after waiting for up to 5 minutes, you should be able to access the minnoSuite dashboard at your domain + \u0026ldquo;/static\u0026rdquo;, such as www.implicit.ga/static . Https will work also. This will be the dashboard. the default admin user is username:admin , pw: admin123  "
},
{
	"uri": "/docsite/installation/domain/freedomain/",
	"title": "Free domain with Freenom",
	"tags": [],
	"description": "",
	"content": "This guide will cover how to set up a free domain using Freenom. Afterwords you can continue setting up your domain.\n Go to http://www.freenom.com/ Go to Services -\u0026gt; Register a new domain. Pick the domain you want and register it (You will register to freenom in the process of obtaining the domain). Go to services-\u0026gt;my domains Click \u0026ldquo;manage domain\u0026rdquo; on the domain you registered Click \u0026ldquo;manage freenom DNS\u0026rdquo; Add a record with type \u0026ldquo;A\u0026rdquo; and IP Address that you copied down earlier for your server, and then click \u0026ldquo;save changes\u0026rdquo; Wait ~1 hour for the DNS changes to propogate You should now be able to go to the domain name you registered and be sent to your docker server, such as \u0026ldquo;http://mydomain.com/dashboard\u0026quot;  "
},
{
	"uri": "/docsite/installation/advanced/",
	"title": "Manual Installation",
	"tags": [],
	"description": "",
	"content": "This page covers manually installing the minnoSuite Dashboard onto a server.\nIn general you will need to download it from here, and install mongoDB and nodeJs onto your system. The installation.sh file is a script for Ubuntu Linux that will install mongoDB and nodeJs for you and start the dashboard. The readme file tells you what to run from your install directory to get the minnoSuite Dashboard running after all dependencies have been installed.\n"
},
{
	"uri": "/docsite/minnosuitedashboard/studydevelopment/",
	"title": "Study Development",
	"tags": [],
	"description": "",
	"content": "  You can see the current documentation of Minno’s language for developing studies at https://minnojs.github.io/ .\n"
},
{
	"uri": "/docsite/minnosuitedashboard/data/",
	"title": "Data",
	"tags": [],
	"description": "",
	"content": "  This page will describe analysing data. It is currently under construction.\n"
},
{
	"uri": "/docsite/installation/domain/",
	"title": "A secure connection (https)",
	"tags": [],
	"description": "",
	"content": "It is highly recommended to run MinnoDashboard using a secure connection (i.e., https, using SSL). If you do ont use a secure connection, the data sent by your study participants to our server would not be encrypted. The same is also true for the cummunication sent by the researchers who build the study, including the password to their account. It is the norm to encrypt such communication online. This guide will cover how to enable SSL on your running dashboard server.\n Get a domain connected to the IP address of your server, such as using our guide to do so with Freenom Log in to the dashboard with an admin account From the dropdown menu\u0026rsquo;s at the top of the screen, select Admin -\u0026gt; edit configuration If you do not have a SSL certificate, use the dropdown to change the server type to \u0026lsquo;Greenlock\u0026rsquo;. Enter your email in the box provided, and the domain you registered in the next box, i.e. mydomain.com. This will automatically get the certificate for you using Greenlock. If you do have a certificate, use the dropdown to change the server type to \u0026lsquo;https\u0026rsquo;. Copy the content of your cert and key files into the text boxes provided. Click save, and now it should work. You\u0026rsquo;ll have to connect using https, such as https://mydomain.com/dashboard from here on out.  "
},
{
	"uri": "/docsite/extendingsite/",
	"title": "Extending This Doc Site",
	"tags": [],
	"description": "",
	"content": "This page covers editing and extending this doc site.\n Install Hugo, folling the instructions here. Also install git if you need to.\n  Get a copy of the docsite here. Download it using git, such as with git clone https://github.com/minnojs/docsite.git\n  From the command line in the docsite folder, run git submodule update --init --recursive to download the Hugo theme used by the docsite.\n  You can read a guide on using the Hugo learn theme that our doc site makes use of here. In general you will be editing files in the content subfolder. Each folder in that is one layer of the nested sidebar menu, with the _index.en.md file inside it for the html that appears when you click on that menu item. Those files will have a weight at the top that determines their order in the menu: the pages with the lowest weight appear first.\n  To start the server, from the command line in the docsite folder, run hugo server -t learn --baseURL=localhost/docsite . Then you should be able to go to http://localhost:1313/docsite/ in your browser and view the site. It should auto update the pages when you edit them, although you may have to restart to see changes to the sidebar menu. press ctrl/command+c in the command line window when you are ready to shut it down.\n  Run hugo in the command line in the docsite folder to compile it when you are finished. Then the generated site will appear in the docs folder in the docsite directory.\n  Using git:\n  After you have installed git, run git checkout https://github.com/minnojs/docsite.git\n  Make your edits and test them.\n  In your docsite folder, run git pull to make sure that there are no other remote updates to the docsite, then run git add ., followed by git commit -m \u0026quot;comment describing your updates to the docsite\u0026quot; and finally git push origin master .\n  "
},
{
	"uri": "/docsite/projectimplicit/",
	"title": "About Project Implicit",
	"tags": [],
	"description": "",
	"content": "Project Implicit is a 501(c)(3) non-profit organization and international collaborative network of researchers investigating group-based bias and disparities such as those based on race, gender, or sexual orientation.\nThe mission of Project Implicit is to educate the public about bias and to provide a “virtual laboratory” for collecting data on the internet. Project Implicit scientists produce high-impact research that forms the basis of our scientific knowledge about bias and disparity.\nFind out more at https://www.projectimplicit.net .\n"
},
{
	"uri": "/docsite/",
	"title": "Documentation for minnoSuite",
	"tags": [],
	"description": "",
	"content": "Documentation for minnoSuite "
},
{
	"uri": "/docsite/minno-manager/tasks/allowleaving/",
	"title": "AllowLeaving",
	"tags": [],
	"description": "",
	"content": "By default, each time users attempt to leave the page, minno-manager inquires whether they actually mean it. The allowLeave task cancels this inquiry, and allows easily leaving the player.. It is usefull if you want to allow users to browse away from a page, for example toward the end of a task in a debriefing page. It makes debugging a bit easier as well.\nThe API is as follows:\n   property description     preventLeaving Whether to prevent users from leaving the page (default is false).    The following task will allow users to leave the page:\n{ type:\u0026#39;allowLeaving\u0026#39; } The following study shows how to use allowLeaving in order to allow users to browse away within an informed consent message.\nAPI.addSequence([ { type: \u0026#39;allowLeaving\u0026#39; }, { type: \u0026#39;message\u0026#39;, templateUrl: \u0026#39;consent.jst\u0026#39; }, { type: \u0026#39;allowLeaving\u0026#39; , preventLeaving: true}, { type: \u0026#39;quest\u0026#39;, scriptUrl: \u0026#39;quest.js\u0026#39; } ]); "
},
{
	"uri": "/docsite/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/docsite/minno-manager/tasks/injectstyle/",
	"title": "Inject Style",
	"tags": [],
	"description": "",
	"content": "The injectStyle task allows you to change the style of Minno throught a study. The style of web pages is determined by their CSS. injectStyle allows you to add any CSS that you like into your study.\n{ type:\u0026#39;injectStyle\u0026#39;, css: \u0026#39;[piq-page] .page-buttons .page-submit {background-color:#d9534f; border:#d43f3a}\u0026#39; } If you have a lot of CSS that you want to add, it makes sense to break the string down as follows:\n{ type:\u0026#39;injectStyle\u0026#39;, css: [ \u0026#39;[piq-page] .page-buttons .page-submit {background-color:#d9534f; border:#d43f3a}\u0026#39;, \u0026#39;[piq-page] .page-buttons .page-decline {background-color:#5cb85c; border:#4cae4c}\u0026#39; ].join(\u0026#39;\\n\u0026#39;) }    property description     css A string of css to add to the page.    "
},
{
	"uri": "/docsite/minno-manager/tasks/istouch/",
	"title": "Is Touch",
	"tags": [],
	"description": "",
	"content": "Detecting when users are using a touch interface on the way is notoriously difficult. It is reasonably easy to detect touch features (such as the existance of a touch screen), but many devices allow the use of both a touch screen and a keyboard and the player can not know which of these the user prefers to use.\nisTouch is a task that allows you to identify users that are using touch interfaces. It detects whether the user device has a device capable of touch interactions and if so explicitly asks if they whish to use these capabilities.\nThe interface for this task is similar to the interface of the yesNo task. With the following differences; first, path has a default value of $isTouch, and second the default values for the texts are differnt.\nA typical isTouch task may simply look like the following. It would set the response to the question into global.$isTouch.\n{ type:\u0026#39;isTouch\u0026#39; } If you want to get more fancy you can customize it:\n{ type:\u0026#39;isTouch\u0026#39;, text: \u0026#39;Would you like to use the touch interface?\u0026#39;, yesText: \u0026#39;Yes! Touch is my thing!\u0026#39;, noText: \u0026#39;Nah, I\\\u0026#39;ll go with the keyboard.\u0026#39; } "
},
{
	"uri": "/docsite/minno-manager/tasks/messages/",
	"title": "Messages",
	"tags": [],
	"description": "",
	"content": "The message tasks are built to be as simple as possible, all they do is present simple html templates. In order to load a template simply set it into the template property as a string, or set the appropriate URL into templateUrl. That\u0026rsquo;s it. (This is not relevant for most users, but the templates are rendered using angularjs $compile and therefore all the relevant directives are available).\nThe context for the template has the following variables available: {global, current, task}.\n   property description     template (text) A string of html to display (The template uses lodash templates).   templateUrl (text) A url to a html template (The template uses lodash templates).   keys Sets a key (or keys) that allow users to proceed. The keys property takes either a key (i.e. 'a') a keyCode (i.e. 65) or an array of such (i.e. ['a','b']).     The following example will display the message \u0026ldquo;Hello World. I am a template.\u0026rdquo;, and proceed when the keys space is pressed.\nvar task = { template: \u0026#39;\u0026lt;div\u0026gt;Hello World. I am a template.\u0026lt;/div\u0026gt;\u0026#39;, keys: \u0026#39; \u0026#39; } The following task will do the exact same thing using two separate files:\nmanager.js\nvar task = { templateUrl: \u0026#39;hello.jst\u0026#39;, keys: \u0026#39; \u0026#39; } hello.jst\n\u0026lt;div\u0026gt;Hello World. I am a template.\u0026lt;/div\u0026gt; Proceeding There are two types of controls that allow users to proceed to the next task.\nFirst, you can use any element in your template as a proceed button, all you have to do is add the pi-message-done attribute to the appropriate element.\n\u0026lt;button type=\u0026#34;button\u0026#34; pi-message-done\u0026gt;Click here to proceed\u0026lt;/button\u0026gt; Alternatively you may use the keys property in order to set a key (or keys) that proceed. The keys property takes either a key (i.e. 'a') a keyCode (i.e. 65) or an array of such (i.e. ['a','b']).\nThis table shows several useful keyCodes for your convenience (there are more here):\n   Code Function     13 Enter   27 Escape   32 Space   37 Left arrow   38 Up arrow   39 Right arrow   40 Down arrow    Links out PI tasks have a system to prevent accidental browsing away from your tasks. It will ask the user if she is sure that she wants to navigate away. When using links within you tasks you want the links to allow immediate navigation away. In order to do that, all you have to do is add a pi-link attribute to your link,\n\u0026lt;a href=\u0026quot;google.com\u0026quot; pi-link\u0026gt;Link text\u0026lt;/a\u0026gt; Project Implicit build The project implicit build has an optional \u0026ldquo;meta template\u0026rdquo; that you may use by setting the piTemplate property to true. When using it, you have several additional options.\n   Property Description     piTemplate (true, false or \u0026lsquo;debrief\u0026rsquo;) Activates the PI template. If set to \u0026lsquo;debrief\u0026rsquo; activates the debrief template, and makes the debrief functions available.   header Header text.   footer Footer text.   buttonText Text for the proceed button (Defaults to: Click Here or press the space button to Proceed).   buttonHide Do not display the button at all (use this as a final page or for messages that use only the keys advance method).   demo If piTemplate is set to \u0026lsquo;debrief\u0026rsquo;, this property set to true will activate the demo version of the debrief.   isTouch In the debriefing page, if demo is set to true, use the url for touch studies.   noDonate (true or false) Do not show the donate button.    The project implicit template supports a debrief template activated by setting piTemplate to \u0026lsquo;debrief\u0026rsquo;. If it is activated, there are two additional functions exposed from within the template. They can be used like so: \u0026lt;%= showPanel('body','header','footer') %\u0026gt; or \u0026lt;%= showFeedback({wrap:false}) %\u0026gt;.\nshowPanel(body, header, footer) \u0026lt;%= showPanel('body','header','footer') %\u0026gt; showPanel displays content within a stylized panel.\n   Argument Description     body The main text of the panel   header The panel header (optional)   footer The panel footer (optional)    showFeedback(options) \u0026lt;%= showFeedback({wrap:false}) %\u0026gt; showFeedback automatically gathers feedback from the global object and displays it within your page. It takes an options object as its single argument. The feedback is gathered from the global object by going through each task object (current) and searching for the feedback property. It depends on the individual tasks respecting this convention. You can fine tune the way feedback is collected and displayed using the following options:\n   Property Description     pre A string to be injected before each feedback (default :'\u0026lt;p\u0026gt;').   post A string to be injected after each feedback (default :'\u0026lt;/p\u0026gt;').   wrap Whether to wrap the results in a panel (default: true).   header If wrapped within a panel, set the panel heading.   noFeedback The text to show if no feedback is found (default: \u0026lsquo;\u0026lt;p\u0026gt;No feedback was found\u0026lt;/p\u0026gt;').   property The default property in which to look for the feedback string (default: \u0026lsquo;feedback\u0026rsquo;).   exclude An array of task names to skip when gathering feedback.    "
},
{
	"uri": "/docsite/minno-manager/",
	"title": "MinnoJS manager",
	"tags": [],
	"description": "",
	"content": "miManager is a player intent on presenting a series of tasks to the users. It uses the same overall API used throught the project implicit tasks.\nIt is written in JavaScript and is built to be extremely versatile and customizable. The scripts are written as JavaScript objects. This format allows writing simple and straightforward scripts using a constrained scripting language. The format also allows advanced users to easily create complex and dynamic scripts using in-line JavaScript.\nCentral concepts The basic unit it PImanager scripts is the task. A task is represented by a single object, the properties of the object define the task to be activated and some settings relevant to it. Tasks are organized and presented using the task sequence. The sequence is an ordered list of tasks.\nWithin the sequence you can use several tools in order to control the flow of your tasks. mixers control the order in which your tasks are presented (and allow you to change the sequence conditionally). inheritance allows abstracting tasks and makes them shorter, simpler, more dynamic, and most important, reusable. And finally templates allow you to micro manage the style of your tasks.\nTasks There are four types of tasks built into miManager miQuest, miTime, messages and post. You can run new tasks in several ways (see the API).\n"
},
{
	"uri": "/docsite/minno-manager/tasks/post/",
	"title": "Post",
	"tags": [],
	"description": "",
	"content": " Save from the Global object Send data directly API  The post task posts plain data to the server. You can use it to either send data that has been saved in the Global object or directly set the data that you want to send. This is a good way to keep track of conditions within your tasks.\nSave from the Global object In your code, you can save data to the Global object. For instance, you might randomly select a condition and save the condition to the Global object.\nFor example, the following code randomly assigns participants to the experimental or the control group:\nAPI.addGlobal({ condition: API.shuffle([\u0026#39;experimental\u0026#39;,\u0026#39;control\u0026#39;])[0] }); In your code, you can then use that condition to provide your participants different tasks or show them different stimuli. However, adding a variable to global does not mean that it would be logged to the server. In order to log that variable to the server, you need to add a \u0026lsquo;post\u0026rsquo; task to the sequence of tasks that you define in the manager file. For example:\n{ type:\u0026#39;post\u0026#39;, name:\u0026#39;cond\u0026#39; variableName: \u0026#39;condition\u0026#39; } This code saves the variable \u0026lsquo;condition\u0026rsquo; and its content to the server, under the task name \u0026lsquo;cond\u0026rsquo;.\nIn each task, you can use the current object to save variables. You can access the current variable from the global, using the task\u0026rsquo;s name. For instance, if your study has a task named iat, and in that task you saved a variable called randomization you will have a variable that can be accessed with global.iat.randomization. You will use that to send the randomization variable to the server:\n{ type:\u0026#39;post\u0026#39;, name:\u0026#39;primaryRandomization\u0026#39; variableName: \u0026#39;iat.randomization\u0026#39; } You can also send several variables together. The following task sends global.iat.randomization and global.iat.feedback to the server:\n{ type:\u0026#39;post\u0026#39;, name:\u0026#39;primaryRandomization\u0026#39; variableName: [ \u0026#39;iat.randomization\u0026#39;, \u0026#39;iat.feedback\u0026#39; ] } Send data directly You can also define an object to be sent:\n{ type:\u0026#39;post\u0026#39;, name:\u0026#39;condition\u0026#39; data: { condition: \u0026#39;experimental\u0026#39; } } One example for the usefulness of this feature is when the randomization in your task is done using a mixer (e.g., a choose mixer). Consider this code:\n{ mixer:\u0026#39;choose\u0026#39;, data:[ { mixer:\u0026#39;wrapper\u0026#39;, data: [ {inherit:\u0026#39;manipulation\u0026#39;}, { type:\u0026#39;post\u0026#39;, name:\u0026#39;condition\u0026#39; data: { condition: \u0026#39;experimental\u0026#39; } } ] }, { mixer:\u0026#39;wrapper\u0026#39;, data: [ {inherit:\u0026#39;control\u0026#39;}, { type:\u0026#39;post\u0026#39;, name:\u0026#39;condition\u0026#39; data: { condition: \u0026#39;control\u0026#39; } } ] } ] } Note that you can use templates as strings within the data object. This way you can pull information from different parts of global to the same place.\ndata can also be a function. In that case, it will recieve the arguments global andtask:\n{ type:'post', name:'secondaryRandomization' stage: 2, data: function(global, task){ return { score: global.currentScore, stage: task.stage } } } API The API is as follows:\n   property description     settings Optional settings that overide the logger settings as defined in the manager.   variableName A path within the global to the object that you want to send. For example: \u0026quot;iat.feedback\u0026quot; will post the object feedback from global.iat. You can also use an array of paths that will be combined into a single post.   path Deprecated verson of variableName   data A raw object to be posted to the server. You may use templates in order to construct it.    "
},
{
	"uri": "/docsite/minno-manager/tasks/postcsv/",
	"title": "Post CSV",
	"tags": [],
	"description": "",
	"content": "The postCsv task is responsible for posting CSV data to the server. It is a good way to save data in a simple easy to use format. In fact, you can use this simple server in order to save it.\nIn order to use the postCsv task, you should set up csv logging in the task settings:\nAPI.addSettings(\u0026#39;logger\u0026#39;, {type:\u0026#39;csv\u0026#39;, url:\u0026#39;csv.php\u0026#39;}); Then, whenever you want in your task you can send the data using the postCsv task. Any properties of the task object are merged into the logger settings (so you can for example change the url for posting).\n{ type:'postCsv', url:'data.php' } "
},
{
	"uri": "/docsite/minno-manager/api/pibuild/",
	"title": "Project Implicit Build",
	"tags": [],
	"description": "",
	"content": "mTurk The project implicit build has a feature for integration with mTurk. All you have to do is add The following code to your project, replacing the \u0026lt;id#\u0026gt; tags with the appropriate data of course. The player will redirect the users back to mTurk immediately after the final task in the manager (as defined by the last property). Setting the isProduction property allows you to switch between the development and production urls for mTurk.\nAPI.addGlobal({ $mTurk: { assignmentId:\u0026#39;\u0026lt;id#\u0026gt;\u0026#39;, hitId:\u0026#39;\u0026lt;id#\u0026gt;\u0026#39;, workerId:\u0026#39;\u0026lt;id#\u0026gt;\u0026#39;, isProduction: true } }); "
},
{
	"uri": "/docsite/minno-manager/tasks/quest/",
	"title": "Quest",
	"tags": [],
	"description": "",
	"content": "The quest task activates a minno-quest task. These are tasks allow you to create complex questionnaires for your experiments. You will probably load the task from a file (use scriptUrl). Note that it is almost always imperative to use the name property, as it is used to refer to data gathered by the task, and to identify it in the results.\n{ type: \u0026#39;quest\u0026#39;, name: \u0026#39;my-quest`, scriptUrl: \u0026#39;my-quest.js\u0026#39; } The API is as follows:\n   property description     scriptUrl (String) The url of the file describing your quest task.   script (Object) The full task object generated by questAPI    "
},
{
	"uri": "/docsite/minno-manager/tasks/redirect/",
	"title": "Redirect",
	"tags": [],
	"description": "",
	"content": "The redirect task is responsible for redirecting users to an external url. It is\nA typical redirect task looks like this:\n{ type:\u0026#39;redirect\u0026#39;, url: \u0026#39;my/redirect/url\u0026#39; } The API is as follows:\n   property description     url The url we intend to redirect to.   condition The redirect will occur if condition is not defined or evaluates to true. If condition is a function it will be invoked and its result will be used instead.    The condition option is a bit advanced so here is an example of using it. The following code will only redirect if piGlobal.shouldRedirect is true.\n{ type:\u0026#39;redirect\u0026#39;, url: \u0026#39;my/redirect/url\u0026#39;, condition: function(){ return piGlobal.shouldRedirect; } } "
},
{
	"uri": "/docsite/minno-manager/tasks/setvalue/",
	"title": "setValue",
	"tags": [],
	"description": "",
	"content": " API Basic use Experiment conditions  The setValue task allows setting a value to environmental variables (e.g., variables stored in the global object). It is useful for implementing experiment conditions.\nAPI    property description     variableName The name of the variable to which the value is set within the global object. For assigning variables nested within global, use the following format: iat.feedback would assign the value to the variable feedback under global.iat.   value A raw value to be set into variableName.   valueFromVariable The name of the variable from which the value is copied. It is within the global object. For accessing variables nested within global, use the following format: iat.feedback would assign the value to the variable feedback under global.iat.   fn A function, that should be called, and the result set int variableName.   post (true/false) should we log this value.   settings Optional settings that overide the logger settings as defined in the manager.   path Deprecated verson of variableName.    Only one of value, valueFromVariable and fn can be used.\nBasic use Following are a set of examples for the basic use of the setValue task, below are some more advanced applications.\nIn the following example, we set the value \u0026lsquo;condition1\u0026rsquo; into the variable cond within the global object.\n{ type:\u0026#39;setValue\u0026#39;, variableName:\u0026#39;cond\u0026#39;, value:\u0026#39;condition1\u0026#39; } It is possible to assign nested variable names. In the following example, we set the value of the variable isControl within the global.conditions object.\n{ type:\u0026#39;setValue\u0026#39;, variableName:\u0026#39;conditions.isControl\u0026#39;, value:true } You can also copy variables. In the following example, we copy the user\u0026rsquo;s response to a questionnaire into a variable under global\n{ type:\u0026#39;setValue\u0026#39;, variableName:\u0026#39;conditions.hasConsent\u0026#39;, valueFromVariable: \u0026#39;consent.questions.consent.response\u0026#39; } You can also create variables dynamically, using a function. The global object is the function\u0026rsquo;s argument:\n{ type: \u0026#39;setValue\u0026#39;, variableName: \u0026#39;score\u0026#39;, fn: function(global){ return global.score1 + global.score2; } } Finally, the task allows posting the variable and its value to the server (i.e., logging it):\n{ type:\u0026#39;setValue\u0026#39;, variableName:\u0026#39;cond\u0026#39;, value:\u0026#39;condition1\u0026#39;, post:true } Experimental conditions Following, are two examples for the use of setValue in order to manage multiple experimental conditions.\nIn this example, we use a \u0026ldquo;choose\u0026rdquo; mixer to choose an experimental condition. We set the selected condition to global.condition and even send it to the server (post:true).\n{ mixer: \u0026#39;choose\u0026#39;, data: [ { mixer: \u0026#39;wrapper\u0026#39;, data: [ {type:\u0026#39;setValue\u0026#39;, variableName: \u0026#39;condition\u0026#39;, value: \u0026#39;trueInstructions\u0026#39;, post:true}, {type:\u0026#39;message\u0026#39;, template: \u0026#39;These are the true instructions\u0026#39;, keys: \u0026#39; \u0026#39;} ] }, {type:\u0026#39;setValue\u0026#39;, variableName: \u0026#39;condition\u0026#39;, value: \u0026#39;control\u0026#39;, post:true}, ] } Sometimes it is more convinient to separate the randomization from actually running the tasks. In this example, we use a \u0026ldquo;weightedChoose\u0026rdquo; mixer in order to randomize the global.condition variable, so that there is twice the probability to be in the \u0026lsquo;trueInstructions\u0026rsquo; group than in the \u0026lsquo;control\u0026rsquo; group. We then use a branch mixer in order to choose the appropriate instructions.\n[ // Randomization  { mixer: \u0026#39;weightedChoose\u0026#39;, weights: [2,1], data: [ {type:\u0026#39;setValue\u0026#39;, variableName: \u0026#39;condition\u0026#39;, value: \u0026#39;trueInstructions\u0026#39;, post:true}, {type:\u0026#39;setValue\u0026#39;, variableName: \u0026#39;condition\u0026#39;, value: \u0026#39;control\u0026#39;, post:true} ] }, // Execute appropriate task (or not...)  { mixer: \u0026#39;branch\u0026#39;, conditions: {compare: \u0026#39;global.condition\u0026#39;, to: \u0026#39;trueInstructions\u0026#39;}, data: [ {type:\u0026#39;message\u0026#39;, template: \u0026#39;These are the true instructions\u0026#39;, keys: \u0026#39; \u0026#39;} ] } ] "
},
{
	"uri": "/docsite/minno-manager/examples/video/",
	"title": "Show Video",
	"tags": [],
	"description": "",
	"content": "The Video manager is a basic example of how to display videos.\nIt is heavily commented so that you can follow everything that goes on. After reading the documentation feel free to download the file and modify it according to your needs.\n"
},
{
	"uri": "/docsite/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/docsite/minno-manager/tasks/time/",
	"title": "Time",
	"tags": [],
	"description": "",
	"content": "The time task activates a minno-time task. These are tasks focused on time-sensitive activities. You will probably load the task from a file (use scriptUrl). Note that it is almost always imperative to use the name property, as it is used to refer to data gathered by the task, and to identify it in the results.\n{ type: \u0026#39;time\u0026#39;, name: \u0026#39;my-task`, scriptUrl: \u0026#39;my-task.js\u0026#39; } The API is as follows:\n   property description     scriptUrl (String) The url of the file describing your time task.   script (Object) The full task object generated by timeAPI    "
},
{
	"uri": "/docsite/minno-manager/examples/weight/",
	"title": "Weight task",
	"tags": [],
	"description": "",
	"content": "The weight manager is a basic example of how we user miManager. It is heavily commented so that you can follow everything that goes on. After reading the documentation feel free to download the file and modify it according to your needs.\n"
},
{
	"uri": "/docsite/minno-manager/tasks/yesno/",
	"title": "Yes/No",
	"tags": [],
	"description": "",
	"content": "yesNo is a task that allows you to ask your users simple yes/no questions without resorting to a full fledged questionnaire.\nA typical yesNo task may look like this:\n{ type:\u0026#39;yesNo\u0026#39;, heading: \u0026#39;Task length\u0026#39;, text: \u0026#39;Would you like to participate in the long task (15min), or in the short one (5min)\u0026#39;, yesText: \u0026#39;The long one\u0026#39;, noText: \u0026#39;The short one\u0026#39;, path: \u0026#39;longOrShort\u0026#39; } After completing the task, the global property longOrShort will be set with true or false according to the response of the user. This value can be used later within the player in order to branch or within templates.\nNote that the value recorded is not posted to the server. (If you are interested in posting it to the server, you may want to look into the post task).\nThe API is as follows:\n   property description     heading A bold heading for the questions (String)   text The actual text of the question (String)   yesText The text for the true value button (String)   noText The text for the false value button (String)   path The property name within global to which to save the data. Values with dots (i.e. \u0026lsquo;$meta.isTouch\u0026rsquo;) will be logged to the propery they are pointing to via lodash set    "
}]