<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Minno Suite â€“ Mixers</title>
    <link>docsite/docs/sequencer/mixer/</link>
    <description>Recent content in Mixers on Minno Suite</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    
	  <atom:link href="docsite/docs/sequencer/mixer/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: mixerBranch</title>
      <link>docsite/docs/sequencer/mixer/mixerbranch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>docsite/docs/sequencer/mixer/mixerbranch/</guid>
      <description>
        
        
        




    




    &lt;link rel=&#34;stylesheet&#34; href=&#34;https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.css&#34; integrity=&#34;sha256-ylWkFzi+pmuVQm80SJjUJvNjzXmRc6+naSkH2xWL5+8=&#34; crossorigin=&#34;anonymous&#34;&gt;
    &lt;link rel=&#34;stylesheet&#34; href=&#34;https://cdn.jsdelivr.net/npm/codemirror@5.59.2/theme/monokai.css&#34; integrity=&#34;sha256-JGPcb9kgGaDHyiqqAdAxFrKA+nxq4BvyHffBB9m2g+g=&#34; crossorigin=&#34;anonymous&#34;&gt;
    &lt;script src=&#34;https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.min.js&#34;&gt;&lt;/script&gt;
    &lt;script src=&#34;https://cdn.jsdelivr.net/npm/codemirror@5.59.2/mode/javascript/javascript.js&#34; integrity=&#34;sha256-XxB90cNdnOuUFQjAE56w4OBTdMu5SHChSz02/Ki3oAQ=&#34; crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;
    


&lt;div class=&#34;pg-section&#34; id=&#34;pg-mixerBranch.md&#34;&gt;
    &lt;p&gt;
    &lt;a class=&#34;pg-play btn btn-secondary&#34;&gt;&lt;i class=&#34;fas fa-play&#34;&gt;&lt;/i&gt; Run &lt;/a&gt;
    &lt;a class=&#34;pg-download btn btn-outline-secondary&#34;&gt;&lt;i class=&#34;fas fa-download&#34;&gt;&lt;/i&gt; Download &lt;/a&gt;
    &lt;/p&gt;

    &lt;textarea class=&#34;code-mirror&#34; rows=&#34;40&#34;&gt;
// Conditionally activate specific sub sequences.
define([&amp;#39;managerAPI&amp;#39;], function(Manager){

  var API = new Manager();

  // Set a global flag that we can test against
  API.addGlobal({condition:&amp;#39;cond1&amp;#39;});

  API.addSequence([
    {
      mixer: &amp;#39;branch&amp;#39;,
      conditions: [
        {compare: &amp;#39;global.condition&amp;#39;, to: &amp;#39;cond1&amp;#39;}
      ],
      data: [
        {
          type:&amp;#39;message&amp;#39;,
          keys: &amp;#39; &amp;#39;,
          template: &amp;#39;Task 1: will be displayed&amp;#39;
        }
      ],
      elseData: [
        {
          type:&amp;#39;message&amp;#39;,
          keys: &amp;#39; &amp;#39;,
          template: &amp;#39;Task 2: will not be displayed&amp;#39;
        }
      ]
    }
  ]);

  return API.script;
});
&lt;/textarea&gt;
&lt;/div&gt;


&lt;script&gt;
    (function(filename){
        var win, section;
        var section = document.getElementById(&#39;pg-&#39; + filename);

        var el = section.querySelector(&#39;.code-mirror&#39;);
        var cm = CodeMirror.fromTextArea(el,{ theme:&#39;monokai&#39; });

        cm.setSize(null, 500);

        section.querySelector(&#39;.pg-download&#39;).addEventListener(&#39;click&#39;, function(){
            var blob = new Blob([cm.getValue()], { type: &#39;text/javascript&#39; });

            if (window.navigator.msSaveOrOpenBlob) window.navigator.msSaveBlob(blob, filename);
            else {
                var elem = window.document.createElement(&#39;a&#39;);
                elem.href = window.URL.createObjectURL(blob);
                elem.download = filename;
                document.body.appendChild(elem);
                elem.click();
                document.body.removeChild(elem);
            }
        });

        section.querySelector(&#39;.pg-play&#39;).addEventListener(&#39;click&#39;, function(){
            var runminnoUrl = &#39;\/runminno.html&#39;;
            if (win) win.close();
            win = window.open(runminnoUrl, &#39;Playground&#39;);
            win.onload = function(){
                win.addEventListener(&#39;unload&#39;, function() {
                    window.focus();
                });
                win.activate(cm.getValue());
            };
        });
    })(&#39;mixerBranch.md&#39;);
&lt;/script&gt;


      </description>
    </item>
    
    <item>
      <title>Docs: mixerChoose</title>
      <link>docsite/docs/sequencer/mixer/mixerchoose/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>docsite/docs/sequencer/mixer/mixerchoose/</guid>
      <description>
        
        
        




    




    &lt;link rel=&#34;stylesheet&#34; href=&#34;https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.css&#34; integrity=&#34;sha256-ylWkFzi+pmuVQm80SJjUJvNjzXmRc6+naSkH2xWL5+8=&#34; crossorigin=&#34;anonymous&#34;&gt;
    &lt;link rel=&#34;stylesheet&#34; href=&#34;https://cdn.jsdelivr.net/npm/codemirror@5.59.2/theme/monokai.css&#34; integrity=&#34;sha256-JGPcb9kgGaDHyiqqAdAxFrKA+nxq4BvyHffBB9m2g+g=&#34; crossorigin=&#34;anonymous&#34;&gt;
    &lt;script src=&#34;https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.min.js&#34;&gt;&lt;/script&gt;
    &lt;script src=&#34;https://cdn.jsdelivr.net/npm/codemirror@5.59.2/mode/javascript/javascript.js&#34; integrity=&#34;sha256-XxB90cNdnOuUFQjAE56w4OBTdMu5SHChSz02/Ki3oAQ=&#34; crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;
    


&lt;div class=&#34;pg-section&#34; id=&#34;pg-mixerChoose.md&#34;&gt;
    &lt;p&gt;
    &lt;a class=&#34;pg-play btn btn-secondary&#34;&gt;&lt;i class=&#34;fas fa-play&#34;&gt;&lt;/i&gt; Run &lt;/a&gt;
    &lt;a class=&#34;pg-download btn btn-outline-secondary&#34;&gt;&lt;i class=&#34;fas fa-download&#34;&gt;&lt;/i&gt; Download &lt;/a&gt;
    &lt;/p&gt;

    &lt;textarea class=&#34;code-mirror&#34; rows=&#34;40&#34;&gt;
// Choose a random subgroup of elements from the sub-sequence.
// By default chooses one. The `n` property allows to set how many to choose.
define([&amp;#39;managerAPI&amp;#39;], function(Manager){

  var API = new Manager();

  API.addSequence([
    {
      mixer:&amp;#39;choose&amp;#39;, // declare the mixer
      n:2, // choose two of the follwoing elements
      data:[ // a list of tasks to bhoose from
        {
          type:&amp;#39;message&amp;#39;,
          keys: &amp;#39; &amp;#39;,
          template: &amp;#39;Task 1&amp;#39;
        },
        {
          type:&amp;#39;message&amp;#39;,
          keys: &amp;#39; &amp;#39;,
          template: &amp;#39;Task 2&amp;#39;
        },
        {
          type:&amp;#39;message&amp;#39;,
          keys: &amp;#39; &amp;#39;,
          template: &amp;#39;Task 3&amp;#39;
        }
      ]
    }
  ]);

  return API.script;
});
&lt;/textarea&gt;
&lt;/div&gt;


&lt;script&gt;
    (function(filename){
        var win, section;
        var section = document.getElementById(&#39;pg-&#39; + filename);

        var el = section.querySelector(&#39;.code-mirror&#39;);
        var cm = CodeMirror.fromTextArea(el,{ theme:&#39;monokai&#39; });

        cm.setSize(null, 500);

        section.querySelector(&#39;.pg-download&#39;).addEventListener(&#39;click&#39;, function(){
            var blob = new Blob([cm.getValue()], { type: &#39;text/javascript&#39; });

            if (window.navigator.msSaveOrOpenBlob) window.navigator.msSaveBlob(blob, filename);
            else {
                var elem = window.document.createElement(&#39;a&#39;);
                elem.href = window.URL.createObjectURL(blob);
                elem.download = filename;
                document.body.appendChild(elem);
                elem.click();
                document.body.removeChild(elem);
            }
        });

        section.querySelector(&#39;.pg-play&#39;).addEventListener(&#39;click&#39;, function(){
            var runminnoUrl = &#39;\/runminno.html&#39;;
            if (win) win.close();
            win = window.open(runminnoUrl, &#39;Playground&#39;);
            win.onload = function(){
                win.addEventListener(&#39;unload&#39;, function() {
                    window.focus();
                });
                win.activate(cm.getValue());
            };
        });
    })(&#39;mixerChoose.md&#39;);
&lt;/script&gt;


      </description>
    </item>
    
    <item>
      <title>Docs: mixerMultiBranch</title>
      <link>docsite/docs/sequencer/mixer/mixermultibranch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>docsite/docs/sequencer/mixer/mixermultibranch/</guid>
      <description>
        
        
        




    




    &lt;link rel=&#34;stylesheet&#34; href=&#34;https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.css&#34; integrity=&#34;sha256-ylWkFzi+pmuVQm80SJjUJvNjzXmRc6+naSkH2xWL5+8=&#34; crossorigin=&#34;anonymous&#34;&gt;
    &lt;link rel=&#34;stylesheet&#34; href=&#34;https://cdn.jsdelivr.net/npm/codemirror@5.59.2/theme/monokai.css&#34; integrity=&#34;sha256-JGPcb9kgGaDHyiqqAdAxFrKA+nxq4BvyHffBB9m2g+g=&#34; crossorigin=&#34;anonymous&#34;&gt;
    &lt;script src=&#34;https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.min.js&#34;&gt;&lt;/script&gt;
    &lt;script src=&#34;https://cdn.jsdelivr.net/npm/codemirror@5.59.2/mode/javascript/javascript.js&#34; integrity=&#34;sha256-XxB90cNdnOuUFQjAE56w4OBTdMu5SHChSz02/Ki3oAQ=&#34; crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;
    


&lt;div class=&#34;pg-section&#34; id=&#34;pg-mixerMultiBranch.md&#34;&gt;
    &lt;p&gt;
    &lt;a class=&#34;pg-play btn btn-secondary&#34;&gt;&lt;i class=&#34;fas fa-play&#34;&gt;&lt;/i&gt; Run &lt;/a&gt;
    &lt;a class=&#34;pg-download btn btn-outline-secondary&#34;&gt;&lt;i class=&#34;fas fa-download&#34;&gt;&lt;/i&gt; Download &lt;/a&gt;
    &lt;/p&gt;

    &lt;textarea class=&#34;code-mirror&#34; rows=&#34;40&#34;&gt;
// Conditionally activate specific sub sequences.
define([&amp;#39;managerAPI&amp;#39;], function(Manager){

  var API = new Manager();

  // Set a global flag that we can test against
  API.addGlobal({condition:&amp;#39;cond1&amp;#39;});

  API.addSequence([
    {
      mixer: &amp;#39;multiBranch&amp;#39;,
      branches: [
          {
            conditions: [
              {compare: &amp;#39;global.condition&amp;#39;, to: &amp;#39;cond0&amp;#39;}
            ],
            data: [
              {type:&amp;#39;message&amp;#39;,keys: &amp;#39; &amp;#39;,template: &amp;#39;Task 0: will not be displayed&amp;#39;}
            ]
          },
          {
            conditions: [
              {compare: &amp;#39;global.condition&amp;#39;, to: &amp;#39;cond1&amp;#39;}
            ],
            data: [
              {type:&amp;#39;message&amp;#39;,keys: &amp;#39; &amp;#39;,template: &amp;#39;Task 1: will be displayed&amp;#39;},
              {type:&amp;#39;message&amp;#39;,keys: &amp;#39; &amp;#39;,template: &amp;#39;Task 2: will be displayed&amp;#39;}
            ]
          }
      ]
    }
  ]);

  return API.script;
});
&lt;/textarea&gt;
&lt;/div&gt;


&lt;script&gt;
    (function(filename){
        var win, section;
        var section = document.getElementById(&#39;pg-&#39; + filename);

        var el = section.querySelector(&#39;.code-mirror&#39;);
        var cm = CodeMirror.fromTextArea(el,{ theme:&#39;monokai&#39; });

        cm.setSize(null, 500);

        section.querySelector(&#39;.pg-download&#39;).addEventListener(&#39;click&#39;, function(){
            var blob = new Blob([cm.getValue()], { type: &#39;text/javascript&#39; });

            if (window.navigator.msSaveOrOpenBlob) window.navigator.msSaveBlob(blob, filename);
            else {
                var elem = window.document.createElement(&#39;a&#39;);
                elem.href = window.URL.createObjectURL(blob);
                elem.download = filename;
                document.body.appendChild(elem);
                elem.click();
                document.body.removeChild(elem);
            }
        });

        section.querySelector(&#39;.pg-play&#39;).addEventListener(&#39;click&#39;, function(){
            var runminnoUrl = &#39;\/runminno.html&#39;;
            if (win) win.close();
            win = window.open(runminnoUrl, &#39;Playground&#39;);
            win.onload = function(){
                win.addEventListener(&#39;unload&#39;, function() {
                    window.focus();
                });
                win.activate(cm.getValue());
            };
        });
    })(&#39;mixerMultiBranch.md&#39;);
&lt;/script&gt;


      </description>
    </item>
    
    <item>
      <title>Docs: mixerRandom</title>
      <link>docsite/docs/sequencer/mixer/mixerrandom/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>docsite/docs/sequencer/mixer/mixerrandom/</guid>
      <description>
        
        
        




    




    &lt;link rel=&#34;stylesheet&#34; href=&#34;https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.css&#34; integrity=&#34;sha256-ylWkFzi+pmuVQm80SJjUJvNjzXmRc6+naSkH2xWL5+8=&#34; crossorigin=&#34;anonymous&#34;&gt;
    &lt;link rel=&#34;stylesheet&#34; href=&#34;https://cdn.jsdelivr.net/npm/codemirror@5.59.2/theme/monokai.css&#34; integrity=&#34;sha256-JGPcb9kgGaDHyiqqAdAxFrKA+nxq4BvyHffBB9m2g+g=&#34; crossorigin=&#34;anonymous&#34;&gt;
    &lt;script src=&#34;https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.min.js&#34;&gt;&lt;/script&gt;
    &lt;script src=&#34;https://cdn.jsdelivr.net/npm/codemirror@5.59.2/mode/javascript/javascript.js&#34; integrity=&#34;sha256-XxB90cNdnOuUFQjAE56w4OBTdMu5SHChSz02/Ki3oAQ=&#34; crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;
    


&lt;div class=&#34;pg-section&#34; id=&#34;pg-mixerRandom.md&#34;&gt;
    &lt;p&gt;
    &lt;a class=&#34;pg-play btn btn-secondary&#34;&gt;&lt;i class=&#34;fas fa-play&#34;&gt;&lt;/i&gt; Run &lt;/a&gt;
    &lt;a class=&#34;pg-download btn btn-outline-secondary&#34;&gt;&lt;i class=&#34;fas fa-download&#34;&gt;&lt;/i&gt; Download &lt;/a&gt;
    &lt;/p&gt;

    &lt;textarea class=&#34;code-mirror&#34; rows=&#34;40&#34;&gt;
// Randomizes the order of elements in `data`.
//
// Please note that the randomizer pre-mixes all the content in data,
// so that any branching mixers will be branched according to the environment as it is when the random mixer is reached.
// If you want to delay the branching until it is reached, simply wrap it within a `wrapper` mixer.

define([&amp;#39;managerAPI&amp;#39;], function(Manager){

  var API = new Manager();

  API.addSequence([
    {
      mixer:&amp;#39;random&amp;#39;, // declare the mixer
      data:[ // a list of tasks to randomize
        {
          type:&amp;#39;message&amp;#39;,
          keys: &amp;#39; &amp;#39;,
          template: &amp;#39;Task 1&amp;#39;
        },
        {
          type:&amp;#39;message&amp;#39;,
          keys: &amp;#39; &amp;#39;,
          template: &amp;#39;Task 2&amp;#39;
        },
        {
          type:&amp;#39;message&amp;#39;,
          keys: &amp;#39; &amp;#39;,
          template: &amp;#39;Task 3&amp;#39;
        }
      ]
    }
  ]);

  return API.script;
});
&lt;/textarea&gt;
&lt;/div&gt;


&lt;script&gt;
    (function(filename){
        var win, section;
        var section = document.getElementById(&#39;pg-&#39; + filename);

        var el = section.querySelector(&#39;.code-mirror&#39;);
        var cm = CodeMirror.fromTextArea(el,{ theme:&#39;monokai&#39; });

        cm.setSize(null, 500);

        section.querySelector(&#39;.pg-download&#39;).addEventListener(&#39;click&#39;, function(){
            var blob = new Blob([cm.getValue()], { type: &#39;text/javascript&#39; });

            if (window.navigator.msSaveOrOpenBlob) window.navigator.msSaveBlob(blob, filename);
            else {
                var elem = window.document.createElement(&#39;a&#39;);
                elem.href = window.URL.createObjectURL(blob);
                elem.download = filename;
                document.body.appendChild(elem);
                elem.click();
                document.body.removeChild(elem);
            }
        });

        section.querySelector(&#39;.pg-play&#39;).addEventListener(&#39;click&#39;, function(){
            var runminnoUrl = &#39;\/runminno.html&#39;;
            if (win) win.close();
            win = window.open(runminnoUrl, &#39;Playground&#39;);
            win.onload = function(){
                win.addEventListener(&#39;unload&#39;, function() {
                    window.focus();
                });
                win.activate(cm.getValue());
            };
        });
    })(&#39;mixerRandom.md&#39;);
&lt;/script&gt;


      </description>
    </item>
    
    <item>
      <title>Docs: mixerRepeat</title>
      <link>docsite/docs/sequencer/mixer/mixerrepeat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>docsite/docs/sequencer/mixer/mixerrepeat/</guid>
      <description>
        
        
        




    




    &lt;link rel=&#34;stylesheet&#34; href=&#34;https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.css&#34; integrity=&#34;sha256-ylWkFzi+pmuVQm80SJjUJvNjzXmRc6+naSkH2xWL5+8=&#34; crossorigin=&#34;anonymous&#34;&gt;
    &lt;link rel=&#34;stylesheet&#34; href=&#34;https://cdn.jsdelivr.net/npm/codemirror@5.59.2/theme/monokai.css&#34; integrity=&#34;sha256-JGPcb9kgGaDHyiqqAdAxFrKA+nxq4BvyHffBB9m2g+g=&#34; crossorigin=&#34;anonymous&#34;&gt;
    &lt;script src=&#34;https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.min.js&#34;&gt;&lt;/script&gt;
    &lt;script src=&#34;https://cdn.jsdelivr.net/npm/codemirror@5.59.2/mode/javascript/javascript.js&#34; integrity=&#34;sha256-XxB90cNdnOuUFQjAE56w4OBTdMu5SHChSz02/Ki3oAQ=&#34; crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;
    


&lt;div class=&#34;pg-section&#34; id=&#34;pg-mixerRepeat.md&#34;&gt;
    &lt;p&gt;
    &lt;a class=&#34;pg-play btn btn-secondary&#34;&gt;&lt;i class=&#34;fas fa-play&#34;&gt;&lt;/i&gt; Run &lt;/a&gt;
    &lt;a class=&#34;pg-download btn btn-outline-secondary&#34;&gt;&lt;i class=&#34;fas fa-download&#34;&gt;&lt;/i&gt; Download &lt;/a&gt;
    &lt;/p&gt;

    &lt;textarea class=&#34;code-mirror&#34; rows=&#34;40&#34;&gt;
// Repeats the element in `data` `times` times.
//
// Please note that the randomizer pre-mixes all the content in data,
// so that any branching mixers will be branched according to the environment as it is when the mixer is reached.
// If you want to delay the branching until it is reached, simply wrap it within a `wrapper` mixer.

define([&amp;#39;managerAPI&amp;#39;], function(Manager){

  var API = new Manager();

  API.addSequence([
    {
      mixer:&amp;#39;repeat&amp;#39;, // declare the mixer
      times: 3, // how many times to repeat these tasks
      data:[ // a list of tasks to repeat
        {
          type:&amp;#39;message&amp;#39;,
          keys: &amp;#39; &amp;#39;,
          template: &amp;#39;Task 1&amp;#39;
        },
        {
          type:&amp;#39;message&amp;#39;,
          keys: &amp;#39; &amp;#39;,
          template: &amp;#39;Task 2&amp;#39;
        }
      ]
    }
  ]);

  return API.script;
});
&lt;/textarea&gt;
&lt;/div&gt;


&lt;script&gt;
    (function(filename){
        var win, section;
        var section = document.getElementById(&#39;pg-&#39; + filename);

        var el = section.querySelector(&#39;.code-mirror&#39;);
        var cm = CodeMirror.fromTextArea(el,{ theme:&#39;monokai&#39; });

        cm.setSize(null, 500);

        section.querySelector(&#39;.pg-download&#39;).addEventListener(&#39;click&#39;, function(){
            var blob = new Blob([cm.getValue()], { type: &#39;text/javascript&#39; });

            if (window.navigator.msSaveOrOpenBlob) window.navigator.msSaveBlob(blob, filename);
            else {
                var elem = window.document.createElement(&#39;a&#39;);
                elem.href = window.URL.createObjectURL(blob);
                elem.download = filename;
                document.body.appendChild(elem);
                elem.click();
                document.body.removeChild(elem);
            }
        });

        section.querySelector(&#39;.pg-play&#39;).addEventListener(&#39;click&#39;, function(){
            var runminnoUrl = &#39;\/runminno.html&#39;;
            if (win) win.close();
            win = window.open(runminnoUrl, &#39;Playground&#39;);
            win.onload = function(){
                win.addEventListener(&#39;unload&#39;, function() {
                    window.focus();
                });
                win.activate(cm.getValue());
            };
        });
    })(&#39;mixerRepeat.md&#39;);
&lt;/script&gt;


      </description>
    </item>
    
    <item>
      <title>Docs: mixerWeightedRandom</title>
      <link>docsite/docs/sequencer/mixer/mixerweightedrandom/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>docsite/docs/sequencer/mixer/mixerweightedrandom/</guid>
      <description>
        
        
        




    




    &lt;link rel=&#34;stylesheet&#34; href=&#34;https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.css&#34; integrity=&#34;sha256-ylWkFzi+pmuVQm80SJjUJvNjzXmRc6+naSkH2xWL5+8=&#34; crossorigin=&#34;anonymous&#34;&gt;
    &lt;link rel=&#34;stylesheet&#34; href=&#34;https://cdn.jsdelivr.net/npm/codemirror@5.59.2/theme/monokai.css&#34; integrity=&#34;sha256-JGPcb9kgGaDHyiqqAdAxFrKA+nxq4BvyHffBB9m2g+g=&#34; crossorigin=&#34;anonymous&#34;&gt;
    &lt;script src=&#34;https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.min.js&#34;&gt;&lt;/script&gt;
    &lt;script src=&#34;https://cdn.jsdelivr.net/npm/codemirror@5.59.2/mode/javascript/javascript.js&#34; integrity=&#34;sha256-XxB90cNdnOuUFQjAE56w4OBTdMu5SHChSz02/Ki3oAQ=&#34; crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;
    


&lt;div class=&#34;pg-section&#34; id=&#34;pg-mixerWeightedRandom.md&#34;&gt;
    &lt;p&gt;
    &lt;a class=&#34;pg-play btn btn-secondary&#34;&gt;&lt;i class=&#34;fas fa-play&#34;&gt;&lt;/i&gt; Run &lt;/a&gt;
    &lt;a class=&#34;pg-download btn btn-outline-secondary&#34;&gt;&lt;i class=&#34;fas fa-download&#34;&gt;&lt;/i&gt; Download &lt;/a&gt;
    &lt;/p&gt;

    &lt;textarea class=&#34;code-mirror&#34; rows=&#34;40&#34;&gt;
// Randomizes the order of elements in `data`.
//
// Please note that the randomizer pre-mixes all the content in data,
// so that any branching mixers will be branched according to the environment as it is when the random mixer is reached.
// If you want to delay the branching until it is reached, simply wrap it within a `wrapper` mixer.

define([&amp;#39;managerAPI&amp;#39;], function(Manager){

  var API = new Manager();

  API.addSequence([
    {
      mixer:&amp;#39;weightedRandom&amp;#39;, // declare the mixer
      weights: [0.2, 0.8], // weights by which to randomize
      data:[ // a list of tasks to randomize
        {
          type:&amp;#39;message&amp;#39;,
          keys: &amp;#39; &amp;#39;,
          template: &amp;#39;Task 1 (20% of the time)&amp;#39;
        },
        {
          type:&amp;#39;message&amp;#39;,
          keys: &amp;#39; &amp;#39;,
          template: &amp;#39;Task 2 (80% of the time)&amp;#39;
        }
      ]
    }
  ]);

  return API.script;
});
&lt;/textarea&gt;
&lt;/div&gt;


&lt;script&gt;
    (function(filename){
        var win, section;
        var section = document.getElementById(&#39;pg-&#39; + filename);

        var el = section.querySelector(&#39;.code-mirror&#39;);
        var cm = CodeMirror.fromTextArea(el,{ theme:&#39;monokai&#39; });

        cm.setSize(null, 500);

        section.querySelector(&#39;.pg-download&#39;).addEventListener(&#39;click&#39;, function(){
            var blob = new Blob([cm.getValue()], { type: &#39;text/javascript&#39; });

            if (window.navigator.msSaveOrOpenBlob) window.navigator.msSaveBlob(blob, filename);
            else {
                var elem = window.document.createElement(&#39;a&#39;);
                elem.href = window.URL.createObjectURL(blob);
                elem.download = filename;
                document.body.appendChild(elem);
                elem.click();
                document.body.removeChild(elem);
            }
        });

        section.querySelector(&#39;.pg-play&#39;).addEventListener(&#39;click&#39;, function(){
            var runminnoUrl = &#39;\/runminno.html&#39;;
            if (win) win.close();
            win = window.open(runminnoUrl, &#39;Playground&#39;);
            win.onload = function(){
                win.addEventListener(&#39;unload&#39;, function() {
                    window.focus();
                });
                win.activate(cm.getValue());
            };
        });
    })(&#39;mixerWeightedRandom.md&#39;);
&lt;/script&gt;


      </description>
    </item>
    
    <item>
      <title>Docs: mixerWrapper</title>
      <link>docsite/docs/sequencer/mixer/mixerwrapper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>docsite/docs/sequencer/mixer/mixerwrapper/</guid>
      <description>
        
        
        




    




    &lt;link rel=&#34;stylesheet&#34; href=&#34;https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.css&#34; integrity=&#34;sha256-ylWkFzi+pmuVQm80SJjUJvNjzXmRc6+naSkH2xWL5+8=&#34; crossorigin=&#34;anonymous&#34;&gt;
    &lt;link rel=&#34;stylesheet&#34; href=&#34;https://cdn.jsdelivr.net/npm/codemirror@5.59.2/theme/monokai.css&#34; integrity=&#34;sha256-JGPcb9kgGaDHyiqqAdAxFrKA+nxq4BvyHffBB9m2g+g=&#34; crossorigin=&#34;anonymous&#34;&gt;
    &lt;script src=&#34;https://cdn.jsdelivr.net/npm/codemirror@5.59.2/lib/codemirror.min.js&#34;&gt;&lt;/script&gt;
    &lt;script src=&#34;https://cdn.jsdelivr.net/npm/codemirror@5.59.2/mode/javascript/javascript.js&#34; integrity=&#34;sha256-XxB90cNdnOuUFQjAE56w4OBTdMu5SHChSz02/Ki3oAQ=&#34; crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;
    


&lt;div class=&#34;pg-section&#34; id=&#34;pg-mixerWrapper.md&#34;&gt;
    &lt;p&gt;
    &lt;a class=&#34;pg-play btn btn-secondary&#34;&gt;&lt;i class=&#34;fas fa-play&#34;&gt;&lt;/i&gt; Run &lt;/a&gt;
    &lt;a class=&#34;pg-download btn btn-outline-secondary&#34;&gt;&lt;i class=&#34;fas fa-download&#34;&gt;&lt;/i&gt; Download &lt;/a&gt;
    &lt;/p&gt;

    &lt;textarea class=&#34;code-mirror&#34; rows=&#34;40&#34;&gt;
// By default the mixer mixes depth first.
// This means that all the internal mixers will be mixed before the external mixer will be mixed before an external mixer kicks in.
// The  wrapper mixer serves as a sort of parentheses allowing you to control the order of mixing.
// In this example we show how to cause a random mixer to treat task 3 and 4 as a single chunk, and therefore keep them together despite randomization.
define([&amp;#39;managerAPI&amp;#39;], function(Manager){

  var API = new Manager();

  API.addSequence([
    /* The random mixer */
    {
      mixer: &amp;#39;random&amp;#39;,
      data: [
        {
          type:&amp;#39;message&amp;#39;,
          keys: &amp;#39; &amp;#39;,
          template: &amp;#39;Task 1&amp;#39;
        },
        {
          type:&amp;#39;message&amp;#39;,
          keys: &amp;#39; &amp;#39;,
          template: &amp;#39;Task 2&amp;#39;
        },
        /* The Wrapper mixer. Tasks 3 and 4 will be treated as a single object when randomizing */
        {
          mixer: &amp;#39;wrapper&amp;#39;,
          data: [
            {
              type:&amp;#39;message&amp;#39;,
              keys: &amp;#39; &amp;#39;,
              template: &amp;#39;Task 3 (always comes before 4)&amp;#39;
            },
            {
              type:&amp;#39;message&amp;#39;,
              keys: &amp;#39; &amp;#39;,
              template: &amp;#39;Task 4 (always comes after 3)&amp;#39;
            }
          ]
        }
      ]
    }
  ]);

  return API.script;
});
&lt;/textarea&gt;
&lt;/div&gt;


&lt;script&gt;
    (function(filename){
        var win, section;
        var section = document.getElementById(&#39;pg-&#39; + filename);

        var el = section.querySelector(&#39;.code-mirror&#39;);
        var cm = CodeMirror.fromTextArea(el,{ theme:&#39;monokai&#39; });

        cm.setSize(null, 500);

        section.querySelector(&#39;.pg-download&#39;).addEventListener(&#39;click&#39;, function(){
            var blob = new Blob([cm.getValue()], { type: &#39;text/javascript&#39; });

            if (window.navigator.msSaveOrOpenBlob) window.navigator.msSaveBlob(blob, filename);
            else {
                var elem = window.document.createElement(&#39;a&#39;);
                elem.href = window.URL.createObjectURL(blob);
                elem.download = filename;
                document.body.appendChild(elem);
                elem.click();
                document.body.removeChild(elem);
            }
        });

        section.querySelector(&#39;.pg-play&#39;).addEventListener(&#39;click&#39;, function(){
            var runminnoUrl = &#39;\/runminno.html&#39;;
            if (win) win.close();
            win = window.open(runminnoUrl, &#39;Playground&#39;);
            win.onload = function(){
                win.addEventListener(&#39;unload&#39;, function() {
                    window.focus();
                });
                win.activate(cm.getValue());
            };
        });
    })(&#39;mixerWrapper.md&#39;);
&lt;/script&gt;


      </description>
    </item>
    
  </channel>
</rss>
