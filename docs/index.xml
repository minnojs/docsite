<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Documentation for minnoSuite</title>
    <link>/docsite/</link>
    <description>Recent content on Documentation for minnoSuite</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Sat, 09 Apr 2016 16:50:16 +0200</lastBuildDate>
    
	<atom:link href="/docsite/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Playground</title>
      <link>/docsite/minno-manager/playground/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docsite/minno-manager/playground/</guid>
      <description>Use this playground in order to try out simple manager scripts.</description>
    </item>
    
    <item>
      <title>Tasks</title>
      <link>/docsite/minno-manager/api/tasks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docsite/minno-manager/api/tasks/</guid>
      <description>The basic unit in miManager is the task. There are many types of tasks available, and you can also create custom tasks of your own. Tasks are defined within the sequence just like any other element, and you can use mixers, inheritance, and templates to control their flow.
For example, following is a manager sequence with two subsequent tasks - first a questionnaire, then a time-sensitive tasks.
API.addSequence([ { type: &amp;#39;quest&amp;#39;, name: &amp;#39;race-questionnaire&amp;#39;, scriptUrl:&amp;#39;race.</description>
    </item>
    
    <item>
      <title>Custom tasks</title>
      <link>/docsite/minno-manager/api/custom-tasks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docsite/minno-manager/api/custom-tasks/</guid>
      <description>The miManager allows the creation of custom tasks. The format is fairly simple though you probably need at least some experience with programing for it.
Plugging in miManager manages the task sequence for you as well as loading the task script (if needed). There are several ways to plug a new task into miManager, the all involve passing the activator function to the manager in various ways.
 You can pass the activator function as a script.</description>
    </item>
    
    <item>
      <title>Settings</title>
      <link>/docsite/minno-manager/api/settings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docsite/minno-manager/api/settings/</guid>
      <description>Settings allow you to control the generic way that the player works. Change the settings using the addSettings function. The first argument to the function is always the name of the setting, the second argument is the setting values. In case the setting is an object, subsequent objects will extend each other so that settings may be progressively added.
All the functions within settings are invoked using angular. This means that you have access to any service you like, as well as some specific assets.</description>
    </item>
    
    <item>
      <title>AllowLeaving</title>
      <link>/docsite/minno-manager/tasks/allowleaving/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docsite/minno-manager/tasks/allowleaving/</guid>
      <description>By default, each time users attempt to leave the page, minno-manager inquires whether they actually mean it. The allowLeave task cancels this inquiry, and allows easily leaving the player.. It is usefull if you want to allow users to browse away from a page, for example toward the end of a task in a debriefing page. It makes debugging a bit easier as well.
The API is as follows:
   property description     preventLeaving Whether to prevent users from leaving the page (default is false).</description>
    </item>
    
    <item>
      <title>Inject Style</title>
      <link>/docsite/minno-manager/tasks/injectstyle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docsite/minno-manager/tasks/injectstyle/</guid>
      <description>The injectStyle task allows you to change the style of Minno throught a study. The style of web pages is determined by their CSS. injectStyle allows you to add any CSS that you like into your study.
{ type:&amp;#39;injectStyle&amp;#39;, css: &amp;#39;[piq-page] .page-buttons .page-submit {background-color:#d9534f; border:#d43f3a}&amp;#39; } If you have a lot of CSS that you want to add, it makes sense to break the string down as follows:
{ type:&amp;#39;injectStyle&amp;#39;, css: [ &amp;#39;[piq-page] .</description>
    </item>
    
    <item>
      <title>Is Touch</title>
      <link>/docsite/minno-manager/tasks/istouch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docsite/minno-manager/tasks/istouch/</guid>
      <description>Detecting when users are using a touch interface on the way is notoriously difficult. It is reasonably easy to detect touch features (such as the existance of a touch screen), but many devices allow the use of both a touch screen and a keyboard and the player can not know which of these the user prefers to use.
isTouch is a task that allows you to identify users that are using touch interfaces.</description>
    </item>
    
    <item>
      <title>Messages</title>
      <link>/docsite/minno-manager/tasks/messages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docsite/minno-manager/tasks/messages/</guid>
      <description>The message tasks are built to be as simple as possible, all they do is present simple html templates. In order to load a template simply set it into the template property as a string, or set the appropriate URL into templateUrl. That&amp;rsquo;s it. (This is not relevant for most users, but the templates are rendered using angularjs $compile and therefore all the relevant directives are available).
The context for the template has the following variables available: {global, current, task}.</description>
    </item>
    
    <item>
      <title>Post</title>
      <link>/docsite/minno-manager/tasks/post/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docsite/minno-manager/tasks/post/</guid>
      <description>Save from the Global object Send data directly API  The post task posts plain data to the server. You can use it to either send data that has been saved in the Global object or directly set the data that you want to send. This is a good way to keep track of conditions within your tasks.
Save from the Global object In your code, you can save data to the Global object.</description>
    </item>
    
    <item>
      <title>Post CSV</title>
      <link>/docsite/minno-manager/tasks/postcsv/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docsite/minno-manager/tasks/postcsv/</guid>
      <description>The postCsv task is responsible for posting CSV data to the server. It is a good way to save data in a simple easy to use format. In fact, you can use this simple server in order to save it.
In order to use the postCsv task, you should set up csv logging in the task settings:
API.addSettings(&amp;#39;logger&amp;#39;, {type:&amp;#39;csv&amp;#39;, url:&amp;#39;csv.php&amp;#39;}); Then, whenever you want in your task you can send the data using the postCsv task.</description>
    </item>
    
    <item>
      <title>Project Implicit Build</title>
      <link>/docsite/minno-manager/api/pibuild/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docsite/minno-manager/api/pibuild/</guid>
      <description>mTurk The project implicit build has a feature for integration with mTurk. All you have to do is add The following code to your project, replacing the &amp;lt;id#&amp;gt; tags with the appropriate data of course. The player will redirect the users back to mTurk immediately after the final task in the manager (as defined by the last property). Setting the isProduction property allows you to switch between the development and production urls for mTurk.</description>
    </item>
    
    <item>
      <title>Quest</title>
      <link>/docsite/minno-manager/tasks/quest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docsite/minno-manager/tasks/quest/</guid>
      <description>The quest task activates a minno-quest task. These are tasks allow you to create complex questionnaires for your experiments. You will probably load the task from a file (use scriptUrl). Note that it is almost always imperative to use the name property, as it is used to refer to data gathered by the task, and to identify it in the results.
{ type: &amp;#39;quest&amp;#39;, name: &amp;#39;my-quest`, scriptUrl: &amp;#39;my-quest.js&amp;#39; } The API is as follows:</description>
    </item>
    
    <item>
      <title>Redirect</title>
      <link>/docsite/minno-manager/tasks/redirect/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docsite/minno-manager/tasks/redirect/</guid>
      <description>The redirect task is responsible for redirecting users to an external url. It is
A typical redirect task looks like this:
{ type:&amp;#39;redirect&amp;#39;, url: &amp;#39;my/redirect/url&amp;#39; } The API is as follows:
   property description     url The url we intend to redirect to.   condition The redirect will occur if condition is not defined or evaluates to true. If condition is a function it will be invoked and its result will be used instead.</description>
    </item>
    
    <item>
      <title>setValue</title>
      <link>/docsite/minno-manager/tasks/setvalue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docsite/minno-manager/tasks/setvalue/</guid>
      <description>API Basic use Experiment conditions  The setValue task allows setting a value to environmental variables (e.g., variables stored in the global object). It is useful for implementing experiment conditions.
API    property description     variableName The name of the variable to which the value is set within the global object. For assigning variables nested within global, use the following format: iat.feedback would assign the value to the variable feedback under global.</description>
    </item>
    
    <item>
      <title>Show Video</title>
      <link>/docsite/minno-manager/examples/video/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docsite/minno-manager/examples/video/</guid>
      <description>The Video manager is a basic example of how to display videos.
It is heavily commented so that you can follow everything that goes on. After reading the documentation feel free to download the file and modify it according to your needs.</description>
    </item>
    
    <item>
      <title>Time</title>
      <link>/docsite/minno-manager/tasks/time/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docsite/minno-manager/tasks/time/</guid>
      <description>The time task activates a minno-time task. These are tasks focused on time-sensitive activities. You will probably load the task from a file (use scriptUrl). Note that it is almost always imperative to use the name property, as it is used to refer to data gathered by the task, and to identify it in the results.
{ type: &amp;#39;time&amp;#39;, name: &amp;#39;my-task`, scriptUrl: &amp;#39;my-task.js&amp;#39; } The API is as follows:
   property description     scriptUrl (String) The url of the file describing your time task.</description>
    </item>
    
    <item>
      <title>Weight task</title>
      <link>/docsite/minno-manager/examples/weight/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docsite/minno-manager/examples/weight/</guid>
      <description>The weight manager is a basic example of how we user miManager. It is heavily commented so that you can follow everything that goes on. After reading the documentation feel free to download the file and modify it according to your needs.</description>
    </item>
    
    <item>
      <title>Yes/No</title>
      <link>/docsite/minno-manager/tasks/yesno/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docsite/minno-manager/tasks/yesno/</guid>
      <description>yesNo is a task that allows you to ask your users simple yes/no questions without resorting to a full fledged questionnaire.
A typical yesNo task may look like this:
{ type:&amp;#39;yesNo&amp;#39;, heading: &amp;#39;Task length&amp;#39;, text: &amp;#39;Would you like to participate in the long task (15min), or in the short one (5min)&amp;#39;, yesText: &amp;#39;The long one&amp;#39;, noText: &amp;#39;The short one&amp;#39;, path: &amp;#39;longOrShort&amp;#39; } After completing the task, the global property longOrShort will be set with true or false according to the response of the user.</description>
    </item>
    
  </channel>
</rss>