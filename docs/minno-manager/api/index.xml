<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>API on Documentation for minnoSuite</title>
    <link>/docsite/minno-manager/api/</link>
    <description>Recent content in API on Documentation for minnoSuite</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    
	<atom:link href="/docsite/minno-manager/api/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Tasks</title>
      <link>/docsite/minno-manager/api/tasks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docsite/minno-manager/api/tasks/</guid>
      <description>The basic unit in miManager is the task. There are many types of tasks available, and you can also create custom tasks of your own. Tasks are defined within the sequence just like any other element, and you can use mixers, inheritance, and templates to control their flow.
For example, following is a manager sequence with two subsequent tasks - first a questionnaire, then a time-sensitive tasks.
API.addSequence([ { type: &amp;#39;quest&amp;#39;, name: &amp;#39;race-questionnaire&amp;#39;, scriptUrl:&amp;#39;race.</description>
    </item>
    
    <item>
      <title>Custom tasks</title>
      <link>/docsite/minno-manager/api/custom-tasks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docsite/minno-manager/api/custom-tasks/</guid>
      <description>The miManager allows the creation of custom tasks. The format is fairly simple though you probably need at least some experience with programing for it.
Plugging in miManager manages the task sequence for you as well as loading the task script (if needed). There are several ways to plug a new task into miManager, the all involve passing the activator function to the manager in various ways.
 You can pass the activator function as a script.</description>
    </item>
    
    <item>
      <title>Settings</title>
      <link>/docsite/minno-manager/api/settings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docsite/minno-manager/api/settings/</guid>
      <description>Settings allow you to control the generic way that the player works. Change the settings using the addSettings function. The first argument to the function is always the name of the setting, the second argument is the setting values. In case the setting is an object, subsequent objects will extend each other so that settings may be progressively added.
All the functions within settings are invoked using angular. This means that you have access to any service you like, as well as some specific assets.</description>
    </item>
    
    <item>
      <title>Project Implicit Build</title>
      <link>/docsite/minno-manager/api/pibuild/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docsite/minno-manager/api/pibuild/</guid>
      <description>mTurk The project implicit build has a feature for integration with mTurk. All you have to do is add The following code to your project, replacing the &amp;lt;id#&amp;gt; tags with the appropriate data of course. The player will redirect the users back to mTurk immediately after the final task in the manager (as defined by the last property). Setting the isProduction property allows you to switch between the development and production urls for mTurk.</description>
    </item>
    
  </channel>
</rss>